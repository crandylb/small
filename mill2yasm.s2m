\`\`0 (+-*/)   mill2yasm.s2m -- Small macros for x86 m32 YASM, CRB, Feb 14, 2014
*`\				comments
;`10`F13\
\
 ` `\                           capture all mill instructions
. `10 `20\
\
 `\                             capture mill with no operand
. `10\
\
_`\                             capture all asm code for output
`10`F13\
\
. `  `\                         capture direct addressing instruction
_ `11 EAX,[`20]\
\
. ` ` `\                        capture operands defined by SET stmt
_ `11 EAX,`20   ; `30\
\
. -  =0\			set ALU flags
_ or EAX,EAX\
\
. *  `\				multiply accumulator by operand
_ imul dword [`10]\
\
. /  `\				divide accumulator by operand
_ cdq\
_ idiv dword [`10]\
\
. MOD  `\			remainder of .AC divided by operand
_ cdq\
_ idiv dword [`10]\
_ mov EAX,EDX\
\
. SHL  `\			shift accumulator left by opnd
_ mov ECX,[`10]\
_ sal EAX,CL\
\
. SHR  `\			shift accumulator right by opnd
_ mov ECX,[`10]\
_ sar EAX,CL\
\
. `  =`\                        capture immediate addressing instructions
_ `11 EAX,`20\
\
. +  =1\			increment accumlator
_ inc EAX\
\
. -  =1\			decrement accumulator
_ dec EAX\
\
. *  =`\			multiply operand by accumulator
_ imul EAX,`10\
\
. * ` `\                        multiply operand defined by SET
_ imul EAX,`10\
\
. /  =`\			divide accumulator by operand
_ cdq\
_ mov  ECX,`10\
_ idiv dword ECX\
\
. / ` `\                        divide by operand defined by SET
; / `10 `20\
. /  =`10\
\
. MOD  =`\			remainder of .AC divided by operand
_ cdq\
_ mov  ECX,`10\
_ idiv dword ECX\
_ mov  EAX,EDX\
\
. MOD ` `\                      remainder operand defined by SET
; MOD `10 `20\
. MOD  =`10\
\
. SHL  =`\			shift accumulator left immediate
_ sal EAX,`10\
\
. SHR  =`\			shift accumulator right immediate
_ sar EAX,`10\
\
. -\				negate accumulator
_ neg EAX\
\
. NOT\				copmlement accumulator
_ not EAX\
\
. ST  `\			store accumulator in operand
_ mov [`10],EAX\			or store address
\
. L  *.AC\			load indirect through accumulator
_ mov EAX,[EAX]\
\
. ST  *`\			store indirect through operand
_ mov EDX,EAX\
_ mov EAX,[`10]\
_ mov [EAX],EDX\
\ 
. J  `\				jump to label
_ jmp `10\
\
. JEQ  `\			jump if equal
_ jz `10\
\
. JNE  `\			jump if not equal
_ jne `10\
\
. JLE  `\			jump if less than or equal
_ jle `10\
\
. JGE  `\			jump if greater than or equal
_ jge `10\
\
. JLT  `\			jump if less than
_ jl `10\
\
. JGT  `\			jump if greater than
_ jg `10\
\
. JX  `\			case stmt CRB 2/01/2014
_ sal  EAX,2\
_ add  EAX,LC`01\
_ mov  EAX,[EAX]\
_ jmp  EAX\
_ SECT DATA\
_LC`01:\
\
. JC  `\			case label CRB 1/31/2014
. CONST `10\
\
. STRT  `\			jump to start location
_ section .text\
_progr:\
_ push EBP\
_ mov  EBP,ESP\
_ jmp `10\
\
. LABEL `\			memory location label
_`10:\
\
. SPACE  `\			amount of space to reserve
_ times `10 dd 0\
\
. CONST `\			data constant
_ dd `10\
\
. ENT `\				global entry points
_ global `10\
\
. EXT `\				external access points
_ extern `10\
\
. EXT P `\			external procedure reference
_ extern `10\
\
. ARG  `\			argument to procedure call
_ push `10\
\
. SCALL P `\			procedure call
.LET *CALL=`10\
\
. SCALL  `\			procedure call
.LET *CALL=`10\
\
. CEND\				call sequence end
*CALL`96 _ call `91\
*CARGS`86\
.IF `81 EQ 0 SKIP 1\
_ add  ESP,4*`81\
\
. NARGS  `\
; NARGS  `10\
.LET *CARGS=`10\
\
. SUBR ` `\			subroutine entry
; SUBR  `20\
.LET *SUBR=`20\
_`20:\
_ push EBP\
_ mov  EBP,ESP\
\
. RECUR `\			recursive subroutine
; RECUR `10\
\
. NPARS `\			number of parameters
; NPARS `10\
.LET *NPAR=1\
\
. PAR  `\			parameter
; PAR  `10\
*NPAR`96\
.LET *PAR.`10=`91\
.SET *NPAR=`91+1\
\
. PEND\				parameter list end
; PEND\
\
. RETN  `,`\			return from subroutine
; RETN  `10,`20\
_ mov ESP,EBP\
_ pop EBP\
_ ret\
\
. RRETN  `,`\			return from recursive subroutine
; RRETN  `10,`20\
_ mov ESP,EBP\
_ pop EBP\
_ ret\
\
. ` D `\                        capture parameter access instruction
; `10 D `20\
.GETP `20\
_ `11 EAX,[EBX]\
\
. ` D =`\                       capture immediate parameter instruction
; `10 D =`20\
.GETP `20\
_ `11 EAX,EBX\
\
. * D `\                         multiply parameter CRB 2/9/14
; * D `10\
.GETP `10\
_ imul dword [EBX]\
\
. / D `\                         divide by parameter CRB 2/9/14
; / D `10\
_ cdq\
.GETP `10\
_ idiv dword [EBX]\
\
. MOD D `\                       remainder on divide by parameter CRB 2/9/14
; MOD D `10\
_ cdq\
.GETP `10\
_ idiv dword [EBX]\
_ mov EAX,EDX\
\
. ST D `\			store parameter
; ST D `10\
.GETP `10\
_ mov [EBX],EAX\
\
. ARGT D `\                     ARG transfer CRB 04/15/2014
; ARGT D `10\
.GETP `10\
\
. ARG D `\                      complete ARG transfer CRB 04/15/2014
; ARG D `10\
_ push EBX\
\
.GETP `\			get parameter CRB 07/13/2013
*OFF`76\
*NPAR`86\
*PAR.`10`96\
.SET *OFF=4*(1+`81-`91)\
_ mov EBX,[EBP+`71] ; `10\
\
. CALL EXIT\
_ push 0\
_ call exit\
\
. BEGIN\                        initialize module
_ global progr\
_ extern exit\
.LET L=mov\                     initialize operator values
.LET +=add\
.LET -=sub\
.LET AND=and\
.LET OR=or\
.LET XOR=xor\
\
. SECT CODE\			added CRB 08/23/2007
*SECT`96\
.IF `91=CODE SKIP 2\
_ section .text\
.LET *SECT=CODE\
\
. SECT DATA\			added CRB 08/23/2007
*SECT`96\
.IF `91=DATA SKIP 2\
_ section .data\
.LET *SECT=DATA\
\
. SECT BSS\			added CRB 08/23/2007
*SECT`96\
.IF `91=BSS SKIP 2\
_ section .bss\
.LET *SECT=BSS\
\
.LET `=`\
`F3\
\
.SET `=`\
`24`26 `F3\
\
.IF `=` SKIP `\			string compare
`F50\
\
.IF `-=` SKIP `\
`F51\
\
.IF ` EQ ` SKIP `\		arithmetic compare
`F60\
\
.SKIP `\
`F4\
\
. END\				end of module
_ end\
`F0\
\\
