* LEX.S1 -- Lexical Scanner for Small, CRB, Oct 11,2007
* Testing, CRB, Oct 24, 2012
* Restoring State matrix to original, CRB, Oct 30, 2012
* Fix end of line detection, CRB, Jan 13, 2014
* Rewrite, CRB, Apr 2,2014
* More mods, CRB, Apr 14, 2014
* Distinguish between LKIND (lexical) and TKIND (token) CRB, May 15, 2014
* Fix obo error in single character token, CRB, Dec 3, 2014
* Clean up token post-processing, CRB, Dec 19, 2014
* Add LKIND=0 to indicate end-of-line, fix loop CRB, Jan 3, 2015
* Fix LKIND when STATE is zero, CRB, Jan 6, 2015
* Clean up after debugging, CRB, Feb 3, 2015

  BEGIN LEX;
  ENTRY LEX;
  EXTERN BUFF;                  * input line passed as global
  EXT PROC A2B40L;
  EXT PROC LOOKS;
  SET PRIM18=61;                * 18th prime used to hash ASCII chars

* character type codes
* T array is indexed by 7-bit ASCII character code using zero indexing
  DCL  T=( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1); * 1 space
  DCL T2=( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1); * 2 alphabetic
  DCL T3=( 1, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5); * 3 digit
  DCL T4=( 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5); * 4 quote mark
  DCL T5=( 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2); * 5 other
  DCL T6=( 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5); 
  DCL T7=( 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2); 
  DCL T8=( 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5);

  DCL S=30;                   * S(0) contains size
    DCL S1=( 1, 2, 3, 4, 6);  * offset 0    1 spaces
    DCL S2=(-1, 2, 2,-1,-1);  * offset 5    2 name
    DCL S3=(-2,-2, 3,-2,-2);  * offset 10   3 integer
    DCL S4=( 4, 4, 4, 5, 4);  * offset 15   4 quoted string
    DCL S5=(-3,-3,-3, 4,-3);  * offset 20   5 other
    DCL S6=(-4,-4,-4,-4,-4);  * offset 25
  DCL SROW=( 6, 0, 5,10,15,20,25); * aux offset vector

  DCL CTYPE;     * type of character
  DCL STATE;     * state variable
  DCL LKIND;     * lexical kind 1: name, 2: int, 3: string, 4, special
  DCL TKIND;     * token kind 0..7 for operators and keywords in initable
  DCL I;         * local character index in BUFF
  DCL CHAR;      * current local character
  DCL ANCHOR;    * anchor start of token non-blank characters
  DCL NUM;       * integer value
  DCL INDEX,WORDS;
  DCL VAL,TAG;

*---------------
  PROC LEX(INEXT,LEXEME);
    STATE=1;     * initialize current state
    I=INEXT;     * local index in BUFF
    ANCHOR=0;    * initialize no anchor
    NUM=0;       * integer value of token

    DO WHILE 1;         * process current token in BUFF
      IF I GT BUFF+1; THEN 
        STATE=0;
        EXIT                    * exit at end of line
        ENDIF
      CHAR=BUFF(I);
      CTYPE=T(CHAR);  * get character type
      STATE=S(SROW(STATE)+CTYPE);
      IF STATE NE 1; THEN       * stop skipping white space
        IF ANCHOR EQ 0; THEN 
          ANCHOR=I;             * drop anchor
        ENDIF
      ENDIF
      IF STATE EQ 3; THEN       * integer
        NUM=10*NUM-'0'+CHAR;    * accumulate value
      ENDIF
      IF STATE LT 0; THEN       * if reached terminal state
        EXIT                    * drop out of loop
      ENDIF
      I=I+1;                    * advance to next character
    ENDDO

    INEXT=I;                    * return start index for next token
    IF STATE;                   * if STATE non-zero
      THEN LKIND=-STATE;        * return lexical LKIND of this token
      ELSE LKIND=0;             * otherwise end of line
    ENDIF
    LEXEME=(I-ANCHOR) SHL 8 OR ANCHOR; * length and anchor

* lexical token post-processing
    CASE LKIND; OF LL0,LL1,LL2,LL3,LL4;
LABEL LL0;                        * end-of-line, do nothing
LABEL LL1;                        * name token
      WORDS=A2B40L(LEXEME,BUFF);  * get base 40 packed name in WORDS
      INDEX=LOOKS(WORDS,VAL,TAG); * return VAL and TAG with INDEX
      LEXEME(1)=INDEX;
      LEXEME(2)=VAL;
      LEXEME(3)=TAG;
LABEL LL2;                        * integer token
      LEXEME(1)=NUM;              * return its binary value
      LEXEME(2)=0;
      LEXEME(3)=0;
LABEL LL3;                        * quoted message string
      LEXEME(1)=0;
      LEXEME(2)=0;
      LEXEME(3)=0;
LABEL LL4;                        * special character token
      WORDS=BUFF(ANCHOR)*PRIM18;  * fix obo error CRB 12/03/2014
      INDEX=LOOKS(WORDS,VAL,TAG);
      LEXEME(1)=INDEX;
      LEXEME(2)=VAL;
      LEXEME(3)=TAG;
      ENDCASE 

    LEXEME=LKIND SHL 28 OR LEXEME; * use lexical LKIND from final STATE
    RETURN LKIND;                  * return lexical LKIND 0..4
  ENDPROC
  END
