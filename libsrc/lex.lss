1       * LEX.S1 -- Lexical Scanner for Small, CRB, Oct 11,2007                 
2       * Testing, CRB, Oct 24, 2012                                            
3       * Restoring State matrix to original, CRB, Oct 30, 2012                 
4       * Fix end of line detection, CRB, Jan 13, 2014                          
5       * Rewrite, CRB, Apr 2,2014                                              
6       * More mods, CRB, Apr 14, 2014                                          
7       * Distinguish between LKIND (lexical) and TKIND (token) CRB, May 15, 201
8       * Fix obo error in single character token, CRB, Dec 3, 2014             
9       * Clean up token post-processing, CRB, Dec 19, 2014                     
10      * Add LKIND=0 to indicate end-of-line, fix loop CRB, Jan 3, 2015        
11      * Fix LKIND when STATE is zero, CRB, Jan 6, 2015                        
12      * Clean up after debugging, CRB, Feb 3, 2015                            
13                                                                              
14        BEGIN LEX;                                                            
15        ENTRY LEX;                                                            
16        EXTERN BUFF;                  * input line passed as global           
17        EXT PROC A2B40L;                                                      
18        EXT PROC LOOKS;                                                       
19        SET PRIM18=61;                * 18th prime used to hash ASCII chars   
20                                                                              
21      * character type codes                                                  
22      * T array is indexed by 7-bit ASCII character code using zero indexing  
23        DCL  T=( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1); * 1 space   
24        DCL T2=( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1); * 2 alphabet
25        DCL T3=( 1, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5); * 3 digit   
26        DCL T4=( 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5); * 4 quote ma
27        DCL T5=( 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2); * 5 other   
28        DCL T6=( 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5);             
29        DCL T7=( 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);             
30        DCL T8=( 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5);             
31                                                                              
32        DCL S=30;                   * S(0) contains size                      
33          DCL S1=( 1, 2, 3, 4, 6);  * offset 0    1 spaces                    
34          DCL S2=(-1, 2, 2,-1,-1);  * offset 5    2 name                      
35          DCL S3=(-2,-2, 3,-2,-2);  * offset 10   3 integer                   
36          DCL S4=( 4, 4, 4, 5, 4);  * offset 15   4 quoted string             
37          DCL S5=(-3,-3,-3, 4,-3);  * offset 20   5 other                     
38          DCL S6=(-4,-4,-4,-4,-4);  * offset 25                               
39        DCL SROW=( 6, 0, 5,10,15,20,25); * aux offset vector                  
40                                                                              
41        DCL CTYPE;     * type of character                                    
42        DCL STATE;     * state variable                                       
43        DCL LKIND;     * lexical kind 1: name, 2: int, 3: string, 4, special  
44        DCL TKIND;     * token kind 0..7 for operators and keywords in initabl
45        DCL I;         * local character index in BUFF                        
46        DCL CHAR;      * current local character                              
47        DCL ANCHOR;    * anchor start of token non-blank characters           
48        DCL NUM;       * integer value                                        
49        DCL INDEX,WORDS;                                                      
50        DCL VAL,TAG;                                                          
51                                                                              
52      *---------------                                                        
53        PROC LEX(INEXT,LEXEME);                                               
54   1      STATE=1;     * initialize current state                             
55   1      I=INEXT;     * local index in BUFF                                  
56   1      ANCHOR=0;    * initialize no anchor                                 
57   1      NUM=0;       * integer value of token                               
58   1                                                                          
59   1      DO WHILE 1;         * process current token in BUFF                 
60   2        IF I GT BUFF+1; THEN                                              
61   3          STATE=0;                                                        
62   3          EXIT                    * exit at end of line                   
63   3          ENDIF                                                           
64   2        CHAR=BUFF(I);                                                     
65   2        CTYPE=T(CHAR);  * get character type                              
66   2        STATE=S(SROW(STATE)+CTYPE);                                       
67   2        IF STATE NE 1; THEN       * stop skipping white space             
68   3          IF ANCHOR EQ 0; THEN                                            
69   4            ANCHOR=I;             * drop anchor                           
70   4          ENDIF                                                           
71   3        ENDIF                                                             
72   2        IF STATE EQ 3; THEN       * integer                               
73   3          NUM=10*NUM-'0'+CHAR;    * accumulate value                      
74   3        ENDIF                                                             
75   2        IF STATE LT 0; THEN       * if reached terminal state             
76   3          EXIT                    * drop out of loop                      
77   3        ENDIF                                                             
78   2        I=I+1;                    * advance to next character             
79   2      ENDDO                                                               
80   1                                                                          
81   1      INEXT=I;                    * return start index for next token     
82   1      IF STATE;                   * if STATE non-zero                     
83   2        THEN LKIND=-STATE;        * return lexical LKIND of this token    
84   2        ELSE LKIND=0;             * otherwise end of line                 
85   2      ENDIF                                                               
86   1      LEXEME=(I-ANCHOR) SHL 8 OR ANCHOR; * length and anchor              
87   1                                                                          
88   1  * lexical token post-processing                                         
89   1      CASE LKIND; OF LL0,LL1,LL2,LL3,LL4;                                 
90   2  LABEL LL0;                        * end-of-line, do nothing             
91   2  LABEL LL1;                        * name token                          
92   2        WORDS=A2B40L(LEXEME,BUFF);  * get base 40 packed name in WORDS    
93   2        INDEX=LOOKS(WORDS,VAL,TAG); * return VAL and TAG with INDEX       
94   2        LEXEME(1)=INDEX;                                                  
95   2        LEXEME(2)=VAL;                                                    
96   2        LEXEME(3)=TAG;                                                    
97   2  LABEL LL2;                        * integer token                       
98   2        LEXEME(1)=NUM;              * return its binary value             
99   2        LEXEME(2)=0;                                                      
100  2        LEXEME(3)=0;                                                      
101  2  LABEL LL3;                        * quoted message string               
102  2        LEXEME(1)=0;                                                      
103  2        LEXEME(2)=0;                                                      
104  2        LEXEME(3)=0;                                                      
105  2  LABEL LL4;                        * special character token             
106  2        WORDS=BUFF(ANCHOR)*PRIM18;  * fix obo error CRB 12/03/2014        
107  2        INDEX=LOOKS(WORDS,VAL,TAG);                                       
108  2        LEXEME(1)=INDEX;                                                  
109  2        LEXEME(2)=VAL;                                                    
110  2        LEXEME(3)=TAG;                                                    
111  2        ENDCASE                                                           
112  1                                                                          
113  1      LEXEME=LKIND SHL 28 OR LEXEME; * use lexical LKIND from final STATE 
114  1      RETURN LKIND;                  * return lexical LKIND 0..4          
115  1    ENDPROC                                                               
116  0    END                                                                   
 NO ERRORS DETECTED
