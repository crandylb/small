** SYMACC.S1 -- Symbol Table Access Module for Small, CRB, Feb 9, 2014
** 03/14/2014 CRB Add COLLS collision counter
*
*BEGIN SYMACC;
 BEGIN
** Symbols are stored in an array called TABLE that is indexed by a hash
** function on the first six characters of a name. Each symbol occupies
** two 32-bit words in the table. The first word contains the compressed
** base 40 representation of the symbol, and the second word contains the
** 16-bit VAL and TAG words.
*
*  ENTRY LOOKS,GETS,PUTS,GETWRD; * symbol table acces procedures
 ENT  LOOKS
 ENT  GETS
 ENT  PUTS
 ENT  GETWRD
*  ENTRY A2B40,B402A;            * ASCII, B40 conversion
 ENT  A2B40
 ENT  B402A
*  ENTRY COLLS;                  * Collision counter
 ENT  COLLS
*
*  SET TABSIZ=8191;              * prime < 2^13
*  DCL TABLE(TABSIZ);            * table < 2^16 bytes, 4094 symbols
 SECT DATA
 LABEL TABLE
 SPACE  8192
*  DCL STRING(6);                * space to hold converted ASCII string
 SECT DATA
 LABEL STRING
 SPACE  7
*  DCL I,J,CHAR,LEN,B,CODE;      * local variables
 SECT DATA
 LABEL I
 SPACE  1
 LABEL J
 SPACE  1
 LABEL CHAR
 SPACE  1
 LABEL LEN
 SPACE  1
 LABEL B
 SPACE  1
 LABEL CODE
 SPACE  1
*  DCL MASKE=-2;                 * mask for even number
 SECT DATA
 LABEL MASKE
 CONST  -2
*  DCL MASKV=65535;              * mask for low 16 bits
 SECT DATA
 LABEL MASKV
 CONST  -1
*  DCL COLFLG,COLLS=0;           * collision counter on instertion only
 SECT DATA
 LABEL COLFLG
 SPACE  1
 LABEL COLLS
 CONST  0
*
** Convert ASCII STR to base 40 CODE packing 6 characters in 32 bit word
** Only upper case letters and decimal digits are allowed
** Return the 32-bit CODE value
*******************************
*PROC A2B40(STR);                * convert ASCII string to base 40
 SECT CODE
 SUBR P A2B40
 NPARS  1
 PAR  STR
 PEND
*  LEN=STR;                      * get length of string
*.GEN =LEN,STR,.BNST,
 L D STR
 ST  LEN
*  IF LEN GT 6; THEN 
*.GEN LEN,=6,.BN-,
 L  LEN
 -  =6
 JLE  LJ1
*    LEN=6;                      * truncate length to 6
*.GEN =LEN,=6,.BNST,
 L  =6
 ST  LEN
*    ENDIF
 LABEL LJ1
*  I=LEN;
*.GEN =I,LEN,.BNST,
 L  LEN
 ST  I
*  CODE=0;                       * init B40 code
*.GEN =CODE,=0,.BNST,
 L  =0
 ST  CODE
*  DO WHILE I GT 0;
 LABEL LJ2
*.GEN I,=0,.BN-,
 L  I
 -  =0
 JLE  LJ3
*    CHAR=STR(I);                * read charaters in reverse order
*.GEN =CHAR,=STR,I,=2,.BNSHL,.BC+,.UA,.BNST,
 L  I
 SHL  =2
 + D =STR
 L  *.AC
 ST  CHAR
*    IF CHAR LE 57; THEN 
*.GEN CHAR,=57,.BN-,
 L  CHAR
 -  =57
 JGT  LJ4
*      B=CHAR-21;                * digits 0..9 -> 27..36
*.GEN =B,CHAR,=21,.BN-,.BNST,
 L  CHAR
 -  =21
 ST  B
*    ELSE IF CHAR LE 90; THEN 
 J  LJ5
 LABEL LJ4
*.GEN CHAR,=90,.BN-,
 L  CHAR
 -  =90
 JGT  LJ6
*      B=CHAR-64;                * upper case A..Z -> 1..26
*.GEN =B,CHAR,=64,.BN-,.BNST,
 L  CHAR
 -  =64
 ST  B
*    ELSE IF CHAR LE 122; THEN 
 J  LJ7
 LABEL LJ6
*.GEN CHAR,=122,.BN-,
 L  CHAR
 -  =122
 JGT  LJ8
*      B=CHAR-96;                * lower case a..z -> 1..26
*.GEN =B,CHAR,=96,.BN-,.BNST,
 L  CHAR
 -  =96
 ST  B
*      ENDIF ENDIF ENDIF
 LABEL LJ8
 LABEL LJ7
 LABEL LJ5
*    CODE=40*CODE+B;             * calculate base 40 code
*.GEN =CODE,=40,CODE,.BC*,B,.BC+,.BNST,
 L  =40
 *  CODE
 +  B
 ST  CODE
*    I=I-1;                      * decrement I for next character
*.GEN =I,I,=1,.BN-,.BNST,
 L  I
 -  =1
 ST  I
*    ENDDO
 J  LJ2
 LABEL LJ3
*  RETURN CODE;                  * return accumulated base 40 code
*.GEN CODE,
 L  CODE
 RETN  A2B40,1
*  ENDPROC
*
** Convert base 40 code to ASCII in NAME
** No return value
******************
*PROC B402A(B40,NAME);           * convert base 40 to ASCII string
 SECT CODE
 SUBR P B402A
 NPARS  2
 PAR  B40
 PAR  NAME
 PEND
*  B=B40;
*.GEN =B,B40,.BNST,
 L D B40
 ST  B
*  I=0;
*.GEN =I,=0,.BNST,
 L  =0
 ST  I
*  DO WHILE I LT 6;
 LABEL LJ9
*.GEN I,=6,.BN-,
 L  I
 -  =6
 JGE  LJ10
*    I=I+1;
*.GEN =I,I,=1,.BC+,.BNST,
 L  I
 +  =1
 ST  I
*    CHAR=B MOD 40;
*.GEN =CHAR,B,=40,.BNMOD,.BNST,
 L  B
 MOD  =40
 ST  CHAR
*    B=B/40;
*.GEN =B,B,=40,.BN/,.BNST,
 L  B
 /  =40
 ST  B
*    IF CHAR EQ 0;
*.GEN CHAR,=0,.BN-,
 L  CHAR
 -  =0
*      THEN EXIT
 JNE  LJ11
 J  LJ10
*      ENDIF
 LABEL LJ11
*    IF CHAR LE 26;
*.GEN CHAR,=26,.BN-,
 L  CHAR
 -  =26
*      THEN CHAR=CHAR+64;        * upper case letter
 JGT  LJ12
*.GEN =CHAR,CHAR,=64,.BC+,.BNST,
 L  CHAR
 +  =64
 ST  CHAR
*      ELSE CHAR=CHAR+21;        * decimal digit
 J  LJ13
 LABEL LJ12
*.GEN =CHAR,CHAR,=21,.BC+,.BNST,
 L  CHAR
 +  =21
 ST  CHAR
*      ENDIF
 LABEL LJ13
*     NAME(I)=CHAR;              * put character in name string
*.GEN =NAME,I,=2,.BNSHL,.BC+,CHAR,.BNST,
 L  I
 SHL  =2
 + D =NAME
 ST  T3Z
 L  CHAR
 ST  *T3Z
*     ENDDO
 J  LJ9
 LABEL LJ10
*  NAME=I;                       * set string length
*.GEN =NAME,I,.BNST,
 L  I
 ST D NAME
*  RETURN
 RETN  B402A,2
*  ENDPROC
 SECT DATA
 LABEL T3Z
 SPACE  2
 SECT CODE
*
** Look up a packed symbol (WORDS) in TABLE
** Insert the new symbol with VAL and TAG if not already in TABLE
** If collision use next empty slot, if TABLE full return -1
** If existing entry found return VAL and TAG from TABLE
** Return value is index of entry in TABLE
******************************************
*PROC LOOKS(WORDS,VAL,TAG);      * look up or insert symbol
 SECT CODE
 SUBR P LOOKS
 NPARS  3
 PAR  WORDS
 PAR  VAL
 PAR  TAG
 PEND
*  MASKV=(32767 SHL 1) OR 1;     * fudge correct value of mask
*.GEN =MASKV,=32767,=1,.BNSHL,=1,.BCOR,.BNST,
 L  =32767
 SHL  =1
 OR  =1
 ST  MASKV
*  COLFLG=0;                     * reset collision flag
*.GEN =COLFLG,=0,.BNST,
 L  =0
 ST  COLFLG
*  I=WORDS MOD TABSIZ;
*.GEN =I,WORDS,TABSIZ,.BNMOD,.BNST,
 L D WORDS
 MOD 8191 TABSIZ
 ST  I
*  I=I AND MASKE;                * use only even index
*.GEN =I,I,MASKE,.BCAND,.BNST,
 L  I
 AND  MASKE
 ST  I
*  J=I;                          * save starting position
*.GEN =J,I,.BNST,
 L  I
 ST  J
*  REPEAT 
 LABEL LJ14
*    IF TABLE(I) EQ 0;           * found empty slot
*.GEN =TABLE,I,=2,.BNSHL,.BC+,.UA,=0,.BN-,
 L  I
 SHL  =2
 +  =TABLE
 L  *.AC
 -  =0
*      THEN TABLE(I)=WORDS;      * insert symbol
 JNE  LJ16
*.GEN =TABLE,I,=2,.BNSHL,.BC+,WORDS,.BNST,
 L  I
 SHL  =2
 +  =TABLE
 ST  T5Z
 L D WORDS
 ST  *T5Z
*        TABLE(I+1)=(TAG SHL 16) OR VAL;
*.GEN =TABLE,I,=1,.BC+,=2,.BNSHL,.BC+,TAG,=16,.BNSHL,VAL,.BCOR,.BNST,
 L  I
 +  =1
 SHL  =2
 +  =TABLE
 ST  T5Z1
 L D TAG
 SHL  =16
 OR D VAL
 ST  *T5Z1
*        IF COLFLG; THEN         * if collision flag on then
*.GEN COLFLG,=0,.BN-,
 L  COLFLG
 -  =0
 JEQ  LJ17
*          COLLS=COLLS+1;        * count collisions on insertion
*.GEN =COLLS,COLLS,=1,.BC+,.BNST,
 L  COLLS
 +  =1
 ST  COLLS
*          ENDIF
 LABEL LJ17
*        RETURN I;
*.GEN I,
 L  I
 RETN  LOOKS,3
*      ELSE IF TABLE(I) EQ WORDS; * found match
 J  LJ18
 LABEL LJ16
*.GEN =TABLE,I,=2,.BNSHL,.BC+,.UA,WORDS,.BN-,
 L  I
 SHL  =2
 +  =TABLE
 L  *.AC
 - D WORDS
*      THEN B=TABLE(I+1);        * retrieve VAL and TAG
 JNE  LJ19
*.GEN =B,=TABLE,I,=1,.BC+,=2,.BNSHL,.BC+,.UA,.BNST,
 L  I
 +  =1
 SHL  =2
 +  =TABLE
 L  *.AC
 ST  B
*        VAL=B AND MASKV;
*.GEN =VAL,B,MASKV,.BCAND,.BNST,
 L  B
 AND  MASKV
 ST D VAL
*        TAG=(B SHR 16) AND MASKV;
*.GEN =TAG,B,=16,.BNSHR,MASKV,.BCAND,.BNST,
 L  B
 SHR  =16
 AND  MASKV
 ST D TAG
*        RETURN I;
*.GEN I,
 L  I
 RETN  LOOKS,3
*      ENDIF ENDIF
 LABEL LJ19
 LABEL LJ18
*    I=I+2;                      * try next slot
*.GEN =I,I,=2,.BC+,.BNST,
 L  I
 +  =2
 ST  I
*    COLFLG=1;                   * set collision flag
*.GEN =COLFLG,=1,.BNST,
 L  =1
 ST  COLFLG
*    IF I GT TABSIZ;
*.GEN I,TABSIZ,.BN-,
 L  I
 - 8191 TABSIZ
*      THEN I=I-TABSIZ;
 JLE  LJ20
*.GEN =I,I,TABSIZ,.BN-,.BNST,
 L  I
 - 8191 TABSIZ
 ST  I
*      ENDIF
 LABEL LJ20
*    UNTIL I EQ J;               * check for wrap to starting position
*.GEN I,J,.BN-,
 L  I
 -  J
 JNE  LJ14
 LABEL LJ15
*  RETURN -1;                    * table full
*.GEN =1,.U-,
 L  =1
 -
 RETN  LOOKS,3
*  ENDPROC
 SECT DATA
 LABEL T5Z
 SPACE  2
 SECT CODE
 SECT DATA
 LABEL T5Z1
 SPACE  1
 SECT CODE
*
** Get VAL and TAG for this INDEX in TABLE
** No return value
******************
*PROC GETS(INDEX,VAL,TAG);       * get VAL and TAG for INDEX
 SECT CODE
 SUBR P GETS
 NPARS  3
 PAR  INDEX
 PAR  VAL
 PAR  TAG
 PEND
*  B=TABLE(INDEX+1);
*.GEN =B,=TABLE,INDEX,=1,.BC+,=2,.BNSHL,.BC+,.UA,.BNST,
 L D INDEX
 +  =1
 SHL  =2
 +  =TABLE
 L  *.AC
 ST  B
*  VAL=B AND MASKV;              * get VAL part
*.GEN =VAL,B,MASKV,.BCAND,.BNST,
 L  B
 AND  MASKV
 ST D VAL
*  TAG=(B SHR 16) AND MASKV;     * get TAG part
*.GEN =TAG,B,=16,.BNSHR,MASKV,.BCAND,.BNST,
 L  B
 SHR  =16
 AND  MASKV
 ST D TAG
*  RETURN
 RETN  GETS,3
*  ENDPROC
*
** Put new VAL and TAG for this INDEX in TABLE
** No return value
******************
*PROC PUTS(PINDEX,VAL,TAG);      * put VAL and TAG at INDEX
 SECT CODE
 SUBR P PUTS
 NPARS  3
 PAR  PINDEX
 PAR  VAL
 PAR  TAG
 PEND
*  TABLE(PINDEX+1)=(TAG SHL 16) OR VAL;
*.GEN =TABLE,PINDEX,=1,.BC+,=2,.BNSHL,.BC+,TAG,=16,.BNSHL,VAL,.BCOR,.BNST,
 L D PINDEX
 +  =1
 SHL  =2
 +  =TABLE
 ST  T9Z1
 L D TAG
 SHL  =16
 OR D VAL
 ST  *T9Z1
*  RETURN
 RETN  PUTS,3
*  ENDPROC
 SECT DATA
 LABEL T9Z1
 SPACE  1
 SECT CODE
*
** Get packed symbol (WDS) for this index in TABLE
** No return value
******************
*PROC GETWRD(INDEX,WDS);        * get base 40 code at INDEX
 SECT CODE
 SUBR P GETWRD
 NPARS  2
 PAR  INDEX
 PAR  WDS
 PEND
*  WDS=TABLE(INDEX);
*.GEN =WDS,=TABLE,INDEX,=2,.BNSHL,.BC+,.UA,.BNST,
 L D INDEX
 SHL  =2
 +  =TABLE
 L  *.AC
 ST D WDS
*  RETURN
 RETN  GETWRD,2
*  ENDPROC
*
*END
 END
