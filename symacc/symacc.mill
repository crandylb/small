** SYMACC.S1 -- Symbol Table Access Module for Small, CRB, Feb 9, 2014
** 03/14/2014 CRB Add COLLS collision counter
** 03/20/2014 CRB Move MASKV initialization to initsym, other corrections
** 03/29/2014 CRB Add A2B40L for use with LEX
** 04/28/2014 CRB Fix bug in A2B40L and use MASKV for LEN
** 11/30/2014 CRB Correct comment in DCL TABLE
** 12/06/2014 CRB Add MASKW initialized in initsym
** 12/08/2014 CRB Further adjustment for negative packed characters
** 12/10/2014 CRB Add MOD40K = 53687091
** 12/12/2014 CRB Initialize VAL and TAG to 0 for new name
** 12/16/2014 CRB Adjust B402A for negative packed name
** 02/17/2015 CRB Clean up blank line at139
*
*BEGIN SYMACC;
 BEGIN
** Symbols are stored in an array called TABLE that is indexed by a hash
** function on the first six characters of a name. Each symbol occupies
** two 32-bit words in the table. The first word contains the compressed
** base 40 representation of the symbol, and the second word contains the
** 16-bit VAL and TAG words.
*
*  ENTRY LOOKS,GETS,PUTS,GETWRD; * symbol table acces procedures
 ENT  LOOKS
 ENT  GETS
 ENT  PUTS
 ENT  GETWRD
*  ENTRY A2B40,A2B40L,B402A;     * ASCII, B40 conversion
 ENT  A2B40
 ENT  A2B40L
 ENT  B402A
*  ENTRY COLLS;                  * Collision counter
 ENT  COLLS
*  ENTRY MASKV,MASKW,MOD40K;
 ENT  MASKV
 ENT  MASKW
 ENT  MOD40K
*
*  SET TABSIZ=8191;              * prime < 2^13
*  DCL TABLE(TABSIZ);            * table < 2^15 bytes, 4094 symbols
 SECT DATA
 LABEL TABLE
 SPACE  8192
*  DCL STRING(6);                * space to hold converted ASCII string
 SECT DATA
 LABEL STRING
 SPACE  7
*  DCL I,J,CHAR,LEN,B,CODE;      * local variables
 SECT DATA
 LABEL I
 SPACE  1
 LABEL J
 SPACE  1
 LABEL CHAR
 SPACE  1
 LABEL LEN
 SPACE  1
 LABEL B
 SPACE  1
 LABEL CODE
 SPACE  1
*  DCL MASKE=-2;                 * mask for even number
 SECT DATA
 LABEL MASKE
 CONST  -2
*  DCL MASKV=65535;              * mask for low 16 bits
 SECT DATA
 LABEL MASKV
 CONST  -1
*  DCL MASKW;                    * mask for signed 32 bits (init in initsym)
 SECT DATA
 LABEL MASKW
 SPACE  1
*  DCL MOD40K;                   * use for negative mod 40: 53617091
 SECT DATA
 LABEL MOD40K
 SPACE  1
*  DCL COLFLG,COLLS=0;           * collision counter on insertion only
 SECT DATA
 LABEL COLFLG
 SPACE  1
 LABEL COLLS
 CONST  0
*  DCL ANC;                      * anchor
 SECT DATA
 LABEL ANC
 SPACE  1
*
** Convert ASCII STR to base 40 CODE packing 6 characters in 32 bit word
** Only upper case letters and decimal digits are allowed
** Return the 32-bit CODE value
*******************************
*PROC A2B40(STR);                * convert ASCII string to base 40
 SECT CODE
 SUBR P A2B40
 NPARS  1
 PAR  STR
 PEND
*  LEN=STR;                      * get length of string
*.GEN =LEN,STR,.BNST,
 L D STR
 ST  LEN
*  IF LEN GT 6; THEN 
*.GEN LEN,=6,.BN-,
 L  LEN
 -  =6
 JLE  LJ1
*    LEN=6;                      * truncate length to 6
*.GEN =LEN,=6,.BNST,
 L  =6
 ST  LEN
*    ENDIF
 LABEL LJ1
*  I=LEN;
*.GEN =I,LEN,.BNST,
 L  LEN
 ST  I
*  CODE=0;                       * init B40 code
*.GEN =CODE,=0,.BNST,
 L  =0
 ST  CODE
*  DO WHILE I GT 0;
 LABEL LJ2
*.GEN I,=0,.BN-,
 L  I
 -  =0
 JLE  LJ3
*    CHAR=STR(I);                * read charaters in reverse order
*.GEN =CHAR,=STR,I,=2,.BNSHL,.BC+,.UA,.BNST,
 L  I
 SHL  =2
 + D =STR
 L  *.AC
 ST  CHAR
*    IF CHAR LE 57; THEN 
*.GEN CHAR,=57,.BN-,
 L  CHAR
 -  =57
 JGT  LJ4
*      B=CHAR-21;                * digits 0..9 -> 27..36
*.GEN =B,CHAR,=21,.BN-,.BNST,
 L  CHAR
 -  =21
 ST  B
*    ELSE IF CHAR LE 90; THEN 
 J  LJ5
 LABEL LJ4
*.GEN CHAR,=90,.BN-,
 L  CHAR
 -  =90
 JGT  LJ6
*      B=CHAR-64;                * upper case A..Z -> 1..26
*.GEN =B,CHAR,=64,.BN-,.BNST,
 L  CHAR
 -  =64
 ST  B
*    ELSE IF CHAR LE 122; THEN 
 J  LJ7
 LABEL LJ6
*.GEN CHAR,=122,.BN-,
 L  CHAR
 -  =122
 JGT  LJ8
*      B=CHAR-96;                * lower case a..z -> 1..26
*.GEN =B,CHAR,=96,.BN-,.BNST,
 L  CHAR
 -  =96
 ST  B
*      ENDIF ENDIF ENDIF
 LABEL LJ8
 LABEL LJ7
 LABEL LJ5
*    CODE=40*CODE+B;             * calculate base 40 code
*.GEN =CODE,=40,CODE,.BC*,B,.BC+,.BNST,
 L  =40
 *  CODE
 +  B
 ST  CODE
*    I=I-1;                      * decrement I for next character
*.GEN =I,I,=1,.BN-,.BNST,
 L  I
 -  =1
 ST  I
*    ENDDO
 J  LJ2
 LABEL LJ3
*  RETURN CODE;                  * return accumulated base 40 code
*.GEN CODE,
 L  CODE
 RETN  A2B40,1
*  ENDPROC
*
** Use this version to grab a token from a substring
** SUBSTR contains length SHL 8 and anchor starting index
*******************************
*PROC A2B40L(SUBSTR,STR);        * convert ASCII string to base 40
 SECT CODE
 SUBR P A2B40L
 NPARS  2
 PAR  SUBSTR
 PAR  STR
 PEND
*  ANC=SUBSTR AND 255;           * get anchor starting index
*.GEN =ANC,SUBSTR,=255,.BCAND,.BNST,
 L D SUBSTR
 AND  =255
 ST  ANC
*  LEN=SUBSTR SHR 8 AND 255;     * get length of string
*.GEN =LEN,SUBSTR,=8,.BNSHR,=255,.BCAND,.BNST,
 L D SUBSTR
 SHR  =8
 AND  =255
 ST  LEN
*  IF LEN GT 6; THEN 
*.GEN LEN,=6,.BN-,
 L  LEN
 -  =6
 JLE  LJ9
*    LEN=6;                      * truncate length to 6
*.GEN =LEN,=6,.BNST,
 L  =6
 ST  LEN
*    ENDIF
 LABEL LJ9
*  I=ANC+LEN-1;                    * start at end of token string
*.GEN =I,ANC,LEN,.BC+,=1,.BN-,.BNST,
 L  ANC
 +  LEN
 -  =1
 ST  I
*  CODE=0;                       * init B40 code
*.GEN =CODE,=0,.BNST,
 L  =0
 ST  CODE
*  DO WHILE I GE ANC;
 LABEL LJ10
*.GEN I,ANC,.BN-,
 L  I
 -  ANC
 JLT  LJ11
*    CHAR=STR(I);                * read charaters in reverse order
*.GEN =CHAR,=STR,I,=2,.BNSHL,.BC+,.UA,.BNST,
 L  I
 SHL  =2
 + D =STR
 L  *.AC
 ST  CHAR
*    IF CHAR LE 57; THEN 
*.GEN CHAR,=57,.BN-,
 L  CHAR
 -  =57
 JGT  LJ12
*      B=CHAR-21;                * digits 0..9 -> 27..36
*.GEN =B,CHAR,=21,.BN-,.BNST,
 L  CHAR
 -  =21
 ST  B
*    ELSE IF CHAR LE 90; THEN 
 J  LJ13
 LABEL LJ12
*.GEN CHAR,=90,.BN-,
 L  CHAR
 -  =90
 JGT  LJ14
*      B=CHAR-64;                * upper case A..Z -> 1..26
*.GEN =B,CHAR,=64,.BN-,.BNST,
 L  CHAR
 -  =64
 ST  B
*    ELSE IF CHAR LE 122; THEN 
 J  LJ15
 LABEL LJ14
*.GEN CHAR,=122,.BN-,
 L  CHAR
 -  =122
 JGT  LJ16
*      B=CHAR-96;                * lower case a..z -> 1..26
*.GEN =B,CHAR,=96,.BN-,.BNST,
 L  CHAR
 -  =96
 ST  B
*      ENDIF ENDIF ENDIF
 LABEL LJ16
 LABEL LJ15
 LABEL LJ13
*    CODE=40*CODE+B;             * calculate base 40 code
*.GEN =CODE,=40,CODE,.BC*,B,.BC+,.BNST,
 L  =40
 *  CODE
 +  B
 ST  CODE
*    I=I-1;                      * decrement I for next character
*.GEN =I,I,=1,.BN-,.BNST,
 L  I
 -  =1
 ST  I
*    ENDDO
 J  LJ10
 LABEL LJ11
*  RETURN CODE;                  * return accumulated base 40 code
*.GEN CODE,
 L  CODE
 RETN  A2B40L,2
*  ENDPROC
*
** Convert base 40 code to ASCII in NAME
** No return value
******************
*PROC B402A(B40,NAME);           * convert base 40 to ASCII string
 SECT CODE
 SUBR P B402A
 NPARS  2
 PAR  B40
 PAR  NAME
 PEND
*  B=B40;
*.GEN =B,B40,.BNST,
 L D B40
 ST  B
*  IF B LT 0; THEN               * adjust for negative base 40 code
*.GEN B,=0,.BN-,
 L  B
 -  =0
 JGE  LJ17
*      B=(B AND MASKW)+8;
*.GEN =B,B,MASKW,.BCAND,=8,.BC+,.BNST,
 L  B
 AND  MASKW
 +  =8
 ST  B
*      CHAR=B MOD 40;
*.GEN =CHAR,B,=40,.BNMOD,.BNST,
 L  B
 MOD  =40
 ST  CHAR
*      B=B/40+MOD40K;
*.GEN =B,B,=40,.BN/,MOD40K,.BC+,.BNST,
 L  B
 /  =40
 +  MOD40K
 ST  B
*    ELSE 
 J  LJ18
 LABEL LJ17
*      CHAR=B MOD 40;
*.GEN =CHAR,B,=40,.BNMOD,.BNST,
 L  B
 MOD  =40
 ST  CHAR
*      B=B/40;
*.GEN =B,B,=40,.BN/,.BNST,
 L  B
 /  =40
 ST  B
*    ENDIF
 LABEL LJ18
*  I=1;
*.GEN =I,=1,.BNST,
 L  =1
 ST  I
*  REPEAT 
 LABEL LJ19
*    IF CHAR LE 26;
*.GEN CHAR,=26,.BN-,
 L  CHAR
 -  =26
*      THEN CHAR=CHAR+64;        * upper case letter
 JGT  LJ21
*.GEN =CHAR,CHAR,=64,.BC+,.BNST,
 L  CHAR
 +  =64
 ST  CHAR
*      ELSE CHAR=CHAR+21;        * decimal digit
 J  LJ22
 LABEL LJ21
*.GEN =CHAR,CHAR,=21,.BC+,.BNST,
 L  CHAR
 +  =21
 ST  CHAR
*      ENDIF
 LABEL LJ22
*    NAME(I)=CHAR;               * put character in name string
*.GEN =NAME,I,=2,.BNSHL,.BC+,CHAR,.BNST,
 L  I
 SHL  =2
 + D =NAME
 ST  T5Z
 L  CHAR
 ST  *T5Z
*    I=I+1;
*.GEN =I,I,=1,.BC+,.BNST,
 L  I
 +  =1
 ST  I
*    CHAR=B MOD 40;
*.GEN =CHAR,B,=40,.BNMOD,.BNST,
 L  B
 MOD  =40
 ST  CHAR
*    B=B/40;
*.GEN =B,B,=40,.BN/,.BNST,
 L  B
 /  =40
 ST  B
*    IF CHAR EQ 0;
*.GEN CHAR,=0,.BN-,
 L  CHAR
 -  =0
*      THEN EXIT
 JNE  LJ23
 J  LJ20
*      ENDIF
 LABEL LJ23
*    UNTIL I GT 6;
*.GEN I,=6,.BN-,
 L  I
 -  =6
 JLE  LJ19
 LABEL LJ20
*  NAME=I-1;                     * set string length
*.GEN =NAME,I,=1,.BN-,.BNST,
 L  I
 -  =1
 ST D NAME
*  RETURN
 RETN  B402A,2
*  ENDPROC
 SECT DATA
 LABEL T5Z
 SPACE  2
 SECT CODE
*
** Look up a packed symbol (WORDS) in TABLE
** Insert the new symbol with VAL and TAG if not already in TABLE
** If collision use next empty slot, if TABLE full return -1
** If existing entry found return VAL and TAG from TABLE
** Return value is index of entry in TABLE
******************************************
*PROC LOOKS(WORDS,VAL,TAG);      * look up or insert symbol
 SECT CODE
 SUBR P LOOKS
 NPARS  3
 PAR  WORDS
 PAR  VAL
 PAR  TAG
 PEND
*  COLFLG=0;                     * reset collision flag
*.GEN =COLFLG,=0,.BNST,
 L  =0
 ST  COLFLG
*  J=WORDS;
*.GEN =J,WORDS,.BNST,
 L D WORDS
 ST  J
*  IF J LT 0; THEN               * fix problem with negative WORDS
*.GEN J,=0,.BN-,
 L  J
 -  =0
 JGE  LJ24
*      J=(J AND MASKW)+32;       * remove sign bit, adjust remainder
*.GEN =J,J,MASKW,.BCAND,=32,.BC+,.BNST,
 L  J
 AND  MASKW
 +  =32
 ST  J
*    ENDIF
 LABEL LJ24
*  I=(J MOD TABSIZ) AND MASKE;   * use only even index
*.GEN =I,J,TABSIZ,.BNMOD,MASKE,.BCAND,.BNST,
 L  J
 MOD 8191 TABSIZ
 AND  MASKE
 ST  I
*  J=I;                          * save starting position
*.GEN =J,I,.BNST,
 L  I
 ST  J
*  REPEAT 
 LABEL LJ25
*    IF TABLE(I) EQ 0;           * found empty slot
*.GEN =TABLE,I,=2,.BNSHL,.BC+,.UA,=0,.BN-,
 L  I
 SHL  =2
 +  =TABLE
 L  *.AC
 -  =0
*      THEN TABLE(I)=WORDS;      * insert symbol
 JNE  LJ27
*.GEN =TABLE,I,=2,.BNSHL,.BC+,WORDS,.BNST,
 L  I
 SHL  =2
 +  =TABLE
 ST  T7Z
 L D WORDS
 ST  *T7Z
*        IF TAG;                 * new symbol name if TAG is zero
*.GEN TAG,=0,.BN-,
 L D TAG
 -  =0
*          THEN TABLE(I+1)=TAG SHL 16 OR VAL; * pack VAL and TAG
 JEQ  LJ28
*.GEN =TABLE,I,=1,.BC+,=2,.BNSHL,.BC+,TAG,=16,.BNSHL,VAL,.BCOR,.BNST,
 L  I
 +  =1
 SHL  =2
 +  =TABLE
 ST  T7Z1
 L D TAG
 SHL  =16
 OR D VAL
 ST  *T7Z1
*          ELSE TABLE(I+1)=0;    * set VAL and TAG to 0 for new name
 J  LJ29
 LABEL LJ28
*.GEN =TABLE,I,=1,.BC+,=2,.BNSHL,.BC+,=0,.BNST,
 L  I
 +  =1
 SHL  =2
 +  =TABLE
 ST  T7Z
 L  =0
 ST  *T7Z
*          ENDIF
 LABEL LJ29
*        IF COLFLG; THEN         * if collision flag on then
*.GEN COLFLG,=0,.BN-,
 L  COLFLG
 -  =0
 JEQ  LJ30
*          COLLS=COLLS+1;        * count collisions on insertion
*.GEN =COLLS,COLLS,=1,.BC+,.BNST,
 L  COLLS
 +  =1
 ST  COLLS
*          ENDIF
 LABEL LJ30
*        RETURN I;
*.GEN I,
 L  I
 RETN  LOOKS,3
*      ELSE IF TABLE(I) EQ WORDS; * found match
 J  LJ31
 LABEL LJ27
*.GEN =TABLE,I,=2,.BNSHL,.BC+,.UA,WORDS,.BN-,
 L  I
 SHL  =2
 +  =TABLE
 L  *.AC
 - D WORDS
*      THEN B=TABLE(I+1);        * retrieve VAL and TAG
 JNE  LJ32
*.GEN =B,=TABLE,I,=1,.BC+,=2,.BNSHL,.BC+,.UA,.BNST,
 L  I
 +  =1
 SHL  =2
 +  =TABLE
 L  *.AC
 ST  B
*        VAL=B AND MASKV;
*.GEN =VAL,B,MASKV,.BCAND,.BNST,
 L  B
 AND  MASKV
 ST D VAL
*        TAG=(B SHR 16) AND MASKV;
*.GEN =TAG,B,=16,.BNSHR,MASKV,.BCAND,.BNST,
 L  B
 SHR  =16
 AND  MASKV
 ST D TAG
*        RETURN I;
*.GEN I,
 L  I
 RETN  LOOKS,3
*      ENDIF ENDIF
 LABEL LJ32
 LABEL LJ31
*    I=I+2;                      * try next slot
*.GEN =I,I,=2,.BC+,.BNST,
 L  I
 +  =2
 ST  I
*    COLFLG=1;                   * set collision flag
*.GEN =COLFLG,=1,.BNST,
 L  =1
 ST  COLFLG
*    IF I GT TABSIZ;
*.GEN I,TABSIZ,.BN-,
 L  I
 - 8191 TABSIZ
*      THEN I=I-TABSIZ;
 JLE  LJ33
*.GEN =I,I,TABSIZ,.BN-,.BNST,
 L  I
 - 8191 TABSIZ
 ST  I
*      ENDIF
 LABEL LJ33
*    UNTIL I EQ J;               * check for wrap to starting position
*.GEN I,J,.BN-,
 L  I
 -  J
 JNE  LJ25
 LABEL LJ26
*  RETURN -1;                    * table full
*.GEN =1,.U-,
 L  =1
 -
 RETN  LOOKS,3
*  ENDPROC
 SECT DATA
 LABEL T7Z
 SPACE  2
 SECT CODE
 SECT DATA
 LABEL T7Z1
 SPACE  1
 SECT CODE
*
** Get VAL and TAG for this INDEX in TABLE
** No return value
******************
*PROC GETS(INDEX,VAL,TAG);       * get VAL and TAG for INDEX
 SECT CODE
 SUBR P GETS
 NPARS  3
 PAR  INDEX
 PAR  VAL
 PAR  TAG
 PEND
*  B=TABLE(INDEX+1);
*.GEN =B,=TABLE,INDEX,=1,.BC+,=2,.BNSHL,.BC+,.UA,.BNST,
 L D INDEX
 +  =1
 SHL  =2
 +  =TABLE
 L  *.AC
 ST  B
*  VAL=B AND MASKV;              * get VAL part
*.GEN =VAL,B,MASKV,.BCAND,.BNST,
 L  B
 AND  MASKV
 ST D VAL
*  TAG=(B SHR 16) AND MASKV;     * get TAG part
*.GEN =TAG,B,=16,.BNSHR,MASKV,.BCAND,.BNST,
 L  B
 SHR  =16
 AND  MASKV
 ST D TAG
*  RETURN
 RETN  GETS,3
*  ENDPROC
*
** Put new VAL and TAG for this INDEX in TABLE
** No return value
******************
*PROC PUTS(INDEX,VAL,TAG);       * put VAL and TAG at INDEX
 SECT CODE
 SUBR P PUTS
 NPARS  3
 PAR  INDEX
 PAR  VAL
 PAR  TAG
 PEND
*  TABLE(INDEX+1)=(TAG SHL 16) OR VAL;
*.GEN =TABLE,INDEX,=1,.BC+,=2,.BNSHL,.BC+,TAG,=16,.BNSHL,VAL,.BCOR,.BNST,
 L D INDEX
 +  =1
 SHL  =2
 +  =TABLE
 ST  T11Z1
 L D TAG
 SHL  =16
 OR D VAL
 ST  *T11Z1
*  RETURN
 RETN  PUTS,3
*  ENDPROC
 SECT DATA
 LABEL T11Z1
 SPACE  1
 SECT CODE
*
** Get packed symbol (WDS) for this index in TABLE
** No return value
******************
*PROC GETWRD(INDEX,WDS);         * get base 40 code at INDEX
 SECT CODE
 SUBR P GETWRD
 NPARS  2
 PAR  INDEX
 PAR  WDS
 PEND
*  WDS=TABLE(INDEX);
*.GEN =WDS,=TABLE,INDEX,=2,.BNSHL,.BC+,.UA,.BNST,
 L D INDEX
 SHL  =2
 +  =TABLE
 L  *.AC
 ST D WDS
*  RETURN
 RETN  GETWRD,2
*  ENDPROC
*
*END
 END
