* SYMACC.S1 -- Symbol Table Access Module for Small, CRB, Feb 9, 2014

BEGIN SYMACC;
* Symbols are stored in an array called TABLE that is indexed by a hash
* function on the first six characters of a name. Each symbol occupies
* two 32-bit words in the table. The first word contains the compressed
* base 40 representation of the symbol, and the second word contains the
* 16-bit VAL and TAG words.

  ENTRY LOOKS,GETS,PUTS,GETWRD; * symbol table acces procedures
  ENTRY A2B40,B402A;            * ASCII, B40 conversion

  SET TABSIZ=8191;              * prime < 2^13
  DCL TABLE(TABSIZ);            * table < 2^16 bytes, 4094 symbols
  DCL STRING(6);                * space to hold converted ASCII string
  DCL I,J,CHAR,LEN,B,CODE;      * local variables
  DCL MASKE=-2;                 * mask for even number
  DCL MASKV=65535;              * mask for low 16 bits

* Convert ASCII STR to base 40 CODE packing 6 characters in 32 bit word
* Only upper case letters and decimal digits are allowed
* Return the 32-bit CODE value
******************************
PROC A2B40(STR);                * convert ASCII string to base 40
  LEN=STR;                      * get length of string
  IF LEN GT 6; THEN 
    LEN=6;                      * truncate length to 6
    ENDIF
  I=LEN;
  CODE=0;                       * init B40 code
  DO WHILE I GT 0;
    CHAR=STR(I);                * read charaters in reverse order
    IF CHAR LE 57; THEN 
      B=CHAR-21;                * digits 0..9 -> 27..36
    ELSE IF CHAR LE 90; THEN 
      B=CHAR-64;                * upper case A..Z -> 1..26
    ELSE IF CHAR LE 122; THEN 
      B=CHAR-96;                * lower case a..z -> 1..26
      ENDIF ENDIF ENDIF
    CODE=40*CODE+B;             * calculate base 40 code
    I=I-1;                      * decrement I for next character
    ENDDO
  RETURN CODE;                  * return accumulated base 40 code
  ENDPROC

* Convert base 40 code to ASCII in NAME
* No return value
*****************
PROC B402A(B40,NAME);           * convert base 40 to ASCII string
  B=B40;
  I=0;
  DO WHILE I LT 6;
    I=I+1;
    CHAR=B MOD 40;
    B=B/40;
    IF CHAR EQ 0;
      THEN EXIT
      ENDIF
    IF CHAR LE 26;
      THEN CHAR=CHAR+64;        * upper case letter
      ELSE CHAR=CHAR+21;        * decimal digit
      ENDIF
     NAME(I)=CHAR;              * put character in name string
     ENDDO
  NAME=I;                       * set string length
  RETURN
  ENDPROC

* Look up a packed symbol (WORDS) in TABLE
* Insert the new symbol with VAL and TAG if not already in TABLE
* If collision use next empty slot, if TABLE full return -1
* If existing entry found return VAL and TAG from TABLE
* Return value is index of entry in TABLE
*****************************************
PROC LOOKS(WORDS,VAL,TAG);      * look up or insert symbol
  MASKV=(32767 SHL 1) OR 1;     * fudge correct value of mask
  I=WORDS MOD TABSIZ;
  I=I AND MASKE;                * use only even index
  J=I;                          * save starting position
  REPEAT 
    IF TABLE(I) EQ 0;           * found empty slot
      THEN TABLE(I)=WORDS;
        TABLE(I+1)=(TAG SHL 16) OR VAL;
        RETURN I;
      ELSE IF TABLE(I) EQ WORDS; * found match
      THEN B=TABLE(I+1);
        VAL=B AND MASKV;
        TAG=(B SHR 16) AND MASKV;
        RETURN I;
      ENDIF ENDIF
    I=I+2;                      * try next slot
    IF I GT TABSIZ;
      THEN I=I-TABSIZ;
      ENDIF
    UNTIL I EQ J;               * check for wrap to starting position
  RETURN -1;                    * table full
  ENDPROC

* Get VAL and TAG for this INDEX in TABLE
* No return value
*****************
PROC GETS(INDEX,VAL,TAG);       * get VAL and TAG for INDEX
  B=TABLE(INDEX+1);
  VAL=B AND MASKV;              * get VAL part
  TAG=(B SHR 16) AND MASKV;     * get TAG part
  RETURN
  ENDPROC

* Put new VAL and TAG for this INDEX in TABLE
* No return value
*****************
PROC PUTS(PINDEX,VAL,TAG);      * put VAL and TAG at INDEX
  TABLE(PINDEX+1)=(TAG SHL 16) OR VAL;
  RETURN
  ENDPROC

* Get packed symbol (WDS) for this index in TABLE
* No return value
*****************
PROC GETWRD(INDEX,WDS);        * get base 40 code at INDEX
  WDS=TABLE(INDEX);
  RETURN
  ENDPROC

END
