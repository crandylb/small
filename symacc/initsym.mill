** initsym.s1 -- Initialize Symbol Table, CRB, Feb 26, 2014
** 03/14/2014 CRB Add COLLS collision counter and token KIND
*
*BEGIN INITSYM;
 BEGIN
*ENT INITSYM;
 ENT  INITSYM
*ENT DMPLIST;
 ENT  DMPLIST
*ENT BUFF;
 ENT  BUFF
*START INIT;
 ENT  INIT
 STRT  INIT
*
*EXT PROC READ,WRITE;
 EXT P READ
 EXT  WRITE
*EXT PROC LEX;
 EXT P LEX
*EXT PROC A2B40,B402A;
 EXT P A2B40
 EXT  B402A
*EXT PROC LOOKS,GETS,GETWRD;
 EXT P LOOKS
 EXT  GETS
 EXT  GETWRD
*EXT PROC IREAD,IFORM,CAT2;
 EXT P IREAD
 EXT  IFORM
 EXT  CAT2
*EXT COLLS;
 EXT  COLLS
*
*DCL I,J,EOF=0,STATUS;
 SECT DATA
 LABEL I
 SPACE  1
 LABEL J
 SPACE  1
 LABEL EOF
 CONST  0
 LABEL STATUS
 SPACE  1
*DCL BUFF(127);
 SECT DATA
 LABEL BUFF
 SPACE  128
*DCL INCH=1,SCRCH=2,OUTCH=3;
 SECT DATA
 LABEL INCH
 CONST  1
 LABEL SCRCH
 CONST  2
 LABEL OUTCH
 CONST  3
*DCL LEXEME(127);
 SECT DATA
 LABEL LEXEME
 SPACE  128
*DCL INDEX,WORDS,KIND,TTYPE,TAG,TAGS,VAL,ATTR;
 SECT DATA
 LABEL INDEX
 SPACE  1
 LABEL WORDS
 SPACE  1
 LABEL KIND
 SPACE  1
 LABEL TTYPE
 SPACE  1
 LABEL TAG
 SPACE  1
 LABEL TAGS
 SPACE  1
 LABEL VAL
 SPACE  1
 LABEL ATTR
 SPACE  1
*DCL COUNT=0,LIST(60);
 SECT DATA
 LABEL COUNT
 CONST  0
 LABEL LIST
 SPACE  61
*DCL STAR=('*');
 SECT DATA
 LABEL STAR
 CONST  42
*DCL DOT=('.');
 SECT DATA
 LABEL DOT
 CONST  46
*DCL QUOTE=39;                   * ASCII single qoute mark
 SECT DATA
 LABEL QUOTE
 CONST  39
*MSG BLANKS='          ';
 SECT DATA
 LABEL BLANKS
 CONST  10
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
*MSG SCRATCH='          ';
 SECT DATA
 LABEL SCRATCH
 CONST  10
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
 CONST  32
*MSG COLLISIONS='Collisions: ';
 SECT DATA
 LABEL COLLISIONS
 CONST  12
 CONST  67
 CONST  111
 CONST  108
 CONST  108
 CONST  105
 CONST  115
 CONST  105
 CONST  111
 CONST  110
 CONST  115
 CONST  58
 CONST  32
*
*LABEL INIT;
 SECT CODE
 LABEL INIT
*  CALL INITSYM;
 SCALL  INITSYM
 NARGS  0
 CEND
*  CALL DMPLIST;
 SCALL  DMPLIST
 NARGS  0
 CEND
*RETURN
 RETN  ,
*
*PROC INITSYM;
 SECT CODE
 SUBR P INITSYM
 NPARS  0
 PEND
*  STATUS=READ(SCRCH,BUFF);      * read first line from chan 2
*.GEN =STATUS,(SCRCH,BUFF),.UFREAD,.BNST,
 SCALL P READ
 NARGS  2
 ARG  SCRCH
 ARG  BUFF
 CEND
 ST  STATUS
*  DO WHILE STATUS NE EOF;
 LABEL LJ2
*.GEN STATUS,EOF,.BN-,
 L  STATUS
 -  EOF
 JEQ  LJ3
*    IF BUFF(1) NE STAR;         * skip comment line
*.GEN =BUFF,=1,=2,.BNSHL,.BC+,.UA,STAR,.BN-,
 L  =1
 SHL  =2
 +  =BUFF
 L  *.AC
 -  STAR
*      THEN 
 JEQ  LJ4
*      I=1;
*.GEN =I,=1,.BNST,
 L  =1
 ST  I
*
*      KIND=LEX(I,LEXEME);       * get a symbol
*.GEN =KIND,(I,LEXEME),.UFLEX,.BNST,
 SCALL P LEX
 NARGS  2
 ARG  I
 ARG  LEXEME
 CEND
 ST  KIND
*      IF LEXEME(1) EQ QUOTE; THEN 
*.GEN =LEXEME,=1,=2,.BNSHL,.BC+,.UA,QUOTE,.BN-,
 L  =1
 SHL  =2
 +  =LEXEME
 L  *.AC
 -  QUOTE
 JNE  LJ6
*          WORDS=LEXEME(2);      * use ASCII code for single character
*.GEN =WORDS,=LEXEME,=2,=2,.BNSHL,.BC+,.UA,.BNST,
 L  =2
 SHL  =2
 +  =LEXEME
 L  *.AC
 ST  WORDS
*          TAGS=1;               * bit for single ASCII character
*.GEN =TAGS,=1,.BNST,
 L  =1
 ST  TAGS
*        ELSE 
 J  LJ7
 LABEL LJ6
*          WORDS=A2B40(LEXEME);  * convert to B40
*.GEN =WORDS,(LEXEME),.UFA2B40,.BNST,
 SCALL P A2B40
 NARGS  1
 ARG  LEXEME
 CEND
 ST  WORDS
*          TAGS=0;               * bit for normal base 40 coding
*.GEN =TAGS,=0,.BNST,
 L  =0
 ST  TAGS
*        ENDIF
 LABEL LJ7
*
*      KIND=LEX(I,LEXEME);       * get the TTYPE code
*.GEN =KIND,(I,LEXEME),.UFLEX,.BNST,
 SCALL P LEX
 NARGS  2
 ARG  I
 ARG  LEXEME
 CEND
 ST  KIND
*      J=1;
*.GEN =J,=1,.BNST,
 L  =1
 ST  J
*      TTYPE=IREAD(J,LEXEME);    * convert to binary
*.GEN =TTYPE,(J,LEXEME),.UFIREAD,.BNST,
 SCALL P IREAD
 NARGS  2
 ARG  J
 ARG  LEXEME
 CEND
 ST  TTYPE
*
*      KIND=LEX(I,LEXEME);       * get VAL for this keyword
*.GEN =KIND,(I,LEXEME),.UFLEX,.BNST,
 SCALL P LEX
 NARGS  2
 ARG  I
 ARG  LEXEME
 CEND
 ST  KIND
*      J=1;
*.GEN =J,=1,.BNST,
 L  =1
 ST  J
*      VAL=IREAD(J,LEXEME);      * convert to binary
*.GEN =VAL,(J,LEXEME),.UFIREAD,.BNST,
 SCALL P IREAD
 NARGS  2
 ARG  J
 ARG  LEXEME
 CEND
 ST  VAL
*
*      KIND=LEX(I,LEXEME);       * get the VALE token KIND code
*.GEN =KIND,(I,LEXEME),.UFLEX,.BNST,
 SCALL P LEX
 NARGS  2
 ARG  I
 ARG  LEXEME
 CEND
 ST  KIND
*      J=1;
*.GEN =J,=1,.BNST,
 L  =1
 ST  J
*      KIND=IREAD(J,LEXEME); 
*.GEN =KIND,(J,LEXEME),.UFIREAD,.BNST,
 SCALL P IREAD
 NARGS  2
 ARG  J
 ARG  LEXEME
 CEND
 ST  KIND
*      TAG=(TAGS SHL 4 OR TTYPE) SHL 8 OR KIND; * set TAG word parts
*.GEN =TAG,TAGS,=4,.BNSHL,TTYPE,.BCOR,=8,.BNSHL,KIND,.BCOR,.BNST,
 L  TAGS
 SHL  =4
 OR  TTYPE
 SHL  =8
 OR  KIND
 ST  TAG
*
*      KIND=LEX(I,LEXEME);       * get the ATTR bits
*.GEN =KIND,(I,LEXEME),.UFLEX,.BNST,
 SCALL P LEX
 NARGS  2
 ARG  I
 ARG  LEXEME
 CEND
 ST  KIND
*      J=1;
*.GEN =J,=1,.BNST,
 L  =1
 ST  J
*      ATTR=IREAD(J,LEXEME);
*.GEN =ATTR,(J,LEXEME),.UFIREAD,.BNST,
 SCALL P IREAD
 NARGS  2
 ARG  J
 ARG  LEXEME
 CEND
 ST  ATTR
*      VAL=ATTR SHL 8 OR VAL;    * ATTR in MSB, ID number in LSB
*.GEN =VAL,ATTR,=8,.BNSHL,VAL,.BCOR,.BNST,
 L  ATTR
 SHL  =8
 OR  VAL
 ST  VAL
*
*      INDEX=LOOKS(WORDS,VAL,TAG);
*.GEN =INDEX,(WORDS,VAL,TAG),.UFLOOKS,.BNST,
 SCALL P LOOKS
 NARGS  3
 ARG  WORDS
 ARG  VAL
 ARG  TAG
 CEND
 ST  INDEX
*      COUNT=COUNT+1;
*.GEN =COUNT,COUNT,=1,.BC+,.BNST,
 L  COUNT
 +  =1
 ST  COUNT
*      LIST(COUNT)=INDEX;        * save INDEX of this keyword
*.GEN =LIST,COUNT,=2,.BNSHL,.BC+,INDEX,.BNST,
 L  COUNT
 SHL  =2
 +  =LIST
 ST  T1Z
 L  INDEX
 ST  *T1Z
*      ENDIF
 LABEL LJ4
*    STATUS=READ(SCRCH,BUFF);    * read next line
*.GEN =STATUS,(SCRCH,BUFF),.UFREAD,.BNST,
 SCALL P READ
 NARGS  2
 ARG  SCRCH
 ARG  BUFF
 CEND
 ST  STATUS
*    ENDDO
 J  LJ2
 LABEL LJ3
*  RETURN
 RETN  INITSYM,0
*ENDPROC
 SECT DATA
 LABEL T1Z
 SPACE  2
 SECT CODE
*
*PROC DMPLIST;
 SECT CODE
 SUBR P DMPLIST
 NPARS  0
 PEND
*  I=1;
*.GEN =I,=1,.BNST,
 L  =1
 ST  I
*  DO WHILE I LE COUNT;
 LABEL LJ19
*.GEN I,COUNT,.BN-,
 L  I
 -  COUNT
 JGT  LJ20
*    INDEX=LIST(I);
*.GEN =INDEX,=LIST,I,=2,.BNSHL,.BC+,.UA,.BNST,
 L  I
 SHL  =2
 +  =LIST
 L  *.AC
 ST  INDEX
*    CALL GETWRD(INDEX,WORDS);   * get coded symbol from table
 SCALL  GETWRD
 NARGS  2
 ARG  INDEX
 ARG  WORDS
 CEND
*    CALL GETS(INDEX,VAL,TAG);   * also get VAL and TAG
 SCALL  GETS
 NARGS  3
 ARG  INDEX
 ARG  VAL
 ARG  TAG
 CEND
*    TTYPE=TAG SHR 8;            * get the type and TAGS field
*.GEN =TTYPE,TAG,=8,.BNSHR,.BNST,
 L  TAG
 SHR  =8
 ST  TTYPE
*    TAGS=TTYPE SHR 4;           * extract the TAGS bits
*.GEN =TAGS,TTYPE,=4,.BNSHR,.BNST,
 L  TTYPE
 SHR  =4
 ST  TAGS
*    TTYPE=TTYPE AND 15;         * isolate the type number
*.GEN =TTYPE,TTYPE,=15,.BCAND,.BNST,
 L  TTYPE
 AND  =15
 ST  TTYPE
*    BUFF=0;
*.GEN =BUFF,=0,.BNST,
 L  =0
 ST  BUFF
*    CALL CAT2(BUFF,BLANKS);     * clear BUFF
 SCALL  CAT2
 NARGS  2
 ARG  BUFF
 ARG  BLANKS
 CEND
*    BUFF=0;
*.GEN =BUFF,=0,.BNST,
 L  =0
 ST  BUFF
*    IF TAGS AND 1; THEN 
*.GEN TAGS,=1,.BCAND,=0,.BN-,
 L  TAGS
 AND  =1
 -  =0
 JEQ  LJ24
*        BUFF(1)=WORDS;          * if single character use ASCII
*.GEN =BUFF,=1,=2,.BNSHL,.BC+,WORDS,.BNST,
 L  =1
 SHL  =2
 +  =BUFF
 ST  T3Z
 L  WORDS
 ST  *T3Z
*      ELSE 
 J  LJ25
 LABEL LJ24
*        CALL B402A(WORDS,BUFF); * decode symbol into BUFF
 SCALL  B402A
 NARGS  2
 ARG  WORDS
 ARG  BUFF
 CEND
*      ENDIF
 LABEL LJ25
*    BUFF=8;
*.GEN =BUFF,=8,.BNST,
 L  =8
 ST  BUFF
*    CALL IFORM(VAL,SCRATCH);    * insert VAL in BUFF
 SCALL  IFORM
 NARGS  2
 ARG  VAL
 ARG  SCRATCH
 CEND
*    CALL CAT2(BUFF,SCRATCH);
 SCALL  CAT2
 NARGS  2
 ARG  BUFF
 ARG  SCRATCH
 CEND
*    SCRATCH=0;
*.GEN =SCRATCH,=0,.BNST,
 L  =0
 ST  SCRATCH
*    CALL CAT2(SCRATCH,BLANKS);
 SCALL  CAT2
 NARGS  2
 ARG  SCRATCH
 ARG  BLANKS
 CEND
*    CALL IFORM(TAG,SCRATCH);    * insert TAG in BUFF
 SCALL  IFORM
 NARGS  2
 ARG  TAG
 ARG  SCRATCH
 CEND
*    CALL CAT2(BUFF,SCRATCH);
 SCALL  CAT2
 NARGS  2
 ARG  BUFF
 ARG  SCRATCH
 CEND
*    CALL WRITE(OUTCH,BUFF);
 SCALL  WRITE
 NARGS  2
 ARG  OUTCH
 ARG  BUFF
 CEND
*    I=I+1;
*.GEN =I,I,=1,.BC+,.BNST,
 L  I
 +  =1
 ST  I
*    ENDDO
 J  LJ19
 LABEL LJ20
*
*    CALL IFORM(COLLS,SCRATCH);
 SCALL  IFORM
 NARGS  2
 ARG  COLLS
 ARG  SCRATCH
 CEND
*    BUFF=0;
*.GEN =BUFF,=0,.BNST,
 L  =0
 ST  BUFF
*    CALL CAT2(BUFF,COLLISIONS);
 SCALL  CAT2
 NARGS  2
 ARG  BUFF
 ARG  COLLISIONS
 CEND
*    CALL CAT2(BUFF,SCRATCH);
 SCALL  CAT2
 NARGS  2
 ARG  BUFF
 ARG  SCRATCH
 CEND
*    CALL WRITE(OUTCH,BUFF);
 SCALL  WRITE
 NARGS  2
 ARG  OUTCH
 ARG  BUFF
 CEND
*  RETURN
 RETN  DMPLIST,0
*  ENDPROC
 SECT DATA
 LABEL T3Z
 SPACE  2
 SECT CODE
*END
 END
