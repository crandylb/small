1       * SCAN.S1 -- Frontend scan for Small, CRB, Feb 19, 2014                 
2       * 04/06/2014 CRB Rewite for new LEX and TOKENS array                    
3       * 06/22/2014 CRB Use BUFF in initsym                                    
4       * 07/24/2014 CRB Tinkering                                              
5       * 11/25/2014 CRB Separate out shotoks                                   
6       * 12/22/2014 CRB Initialize TOKENS to zero inside loop                  
7       * 12/31/2014 CRB Handle LKIND=0 at end-of-line                          
8       * 01/06/2015 CRB Change TOKNUM to TINDEX, more comments                 
9       * 02/02/2015 CRB Change way TOKENS are counted                          
10      * 03/09/2015 CRB Add call to evals callback function                    
11      * 03/11/2015 CRB Initialize IT=1 before call to EVALS                   
12                                                                              
13        BEGIN SCAN;                                                           
14        ENTRY SCAN;                                                           
15        ENTRY TOKENS;                   * make TOKENS global for parsing      
16        ENT SHOTOKS;                                                          
17                                                                              
18        EXT PROC SHOTOKS;               * used only for testing               
19        EXT PROC READ,WRITE,IFORM;                                            
20        EXT PROC LEX;                                                         
21        EXT PROC EVALS;                 * eval callback function              
22        EXT BUFF;                       * use BUFF in initsym                 
23        EXT MASKV;                                                            
24        ENT OUTCH;                                                            
25                                                                              
26        SET MAXTOK=127;                 * maximum number of tokens in a line  
27        DCL INCH=1,OUTCH=3,STATUS;                                            
28        DCL EOF=0;                                                            
29        DCL LEXEME(4);                  * attributes for a lexical token      
30        DCL LKIND;                      * lexical KIND code                   
31        DCL ICHAR,MODE;                                                       
32        DCL STAR=('*');                 * asterisk                            
33        DCL SEMICO=(';');               * semicolon                           
34        DCL FIRSTC;                     * first character of current token    
35        DCL TOKENS(MAXTOK*4);           * array of tokens in current line     
36        DCL TINDEX;                     * current token index                 
37        DCL ANSWER,IT;                  * eval answer, index into TOKENS array
38                                                                              
39      PROC SCAN;                        * frontend scanner for Small          
40   1    DO WHILE 1;                                                           
41   2      TOKENS=0;                     * reinitialize to zero for each loop  
42   2      MODE=1;                       * MODE 1 allows comments              
43   2      STATUS=READ(INCH,BUFF);                                             
44   2      IF STATUS EQ EOF;                                                   
45   3        THEN RETURN;                                                      
46   3        ENDIF                                                             
47   2      CALL WRITE(OUTCH,BUFF);                                             
48   2      ICHAR=1;                                                            
49   2      TINDEX=1;                                                           
50   2      DO WHILE ICHAR LE BUFF;       * until end of line                   
51   3        LKIND=LEX(ICHAR,LEXEME);    * call LEX, get LKIND and LEXEME      
52   3  LABEL LEX1;                       * debugging hack                      
53   3        IF LKIND EQ 0;                                                    
54   4          THEN GO TO CONTIN; ENDIF                                        
55   3        FIRSTC=BUFF(LEXEME AND 255); * extract anchor for 1st char of toke
56   3        IF MODE; THEN                                                     
57   4          IF FIRSTC EQ STAR;        * if MODE 1 and * skip to next        
58   5            THEN GO TO CONTIN;      * input line to ignore comment        
59   5            ELSE MODE=0;            * comments not allowed in MODE 0      
60   5          ENDIF ENDIF                                                     
61   3        IF MODE EQ 0; THEN                                                
62   4          IF FIRSTC EQ SEMICO;      * revert to mode 1 on semicolon       
63   5             THEN MODE=1;                                                 
64   5          ENDIF ENDIF                                                     
65   3                                                                          
66   3        TOKENS(TINDEX)=LEXEME;      * save current token                  
67   3        CASE LKIND-1; OF LK1,LK2,LK3,LK4;                                 
68   4  LABEL LK1; GO TO LK4;             * symbol in TABLE                     
69   4  LABEL LK2; TOKENS(TINDEX+1)=LEXEME(1); * integer value                  
70   4  LABEL LK3;                        * quote string                        
71   4  LABEL LK4;                        * single character token              
72   4          TOKENS(TINDEX+1)=LEXEME(1);                                     
73   4          TOKENS(TINDEX+2)=LEXEME(2);                                     
74   4          TOKENS(TINDEX+3)=LEXEME(3);                                     
75   4        ENDCASE                                                           
76   3                                                                          
77   3        TINDEX=TINDEX+4;            * bump token index                    
78   3        TOKENS=TOKENS+1;            * count number of tokens              
79   3        ENDDO                                                             
80   2                                                                          
81   2  LABEL CONTIN;                                                           
82   2  *    CALL SHOTOKS;                 * used only for testing              
83   2      IT=1;                                                               
84   2      ANSWER=EVALS(IT);             * call eval shell                     
85   2      ENDDO                                                               
86   1    RETURN                                                                
87   1  ENDPROC                                                                 
88   0                                                                          
89   0  END                                                                     
 NO ERRORS DETECTED
