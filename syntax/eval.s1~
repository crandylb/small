* eval.s1 -- Britten's Archaic Expression Evaluator, CRB, Sep 23, 2014
* 09/29/2014 CRB tinkered with the coding
* 10/20/2014 CRB more tinkering
* 03/09/2015 CRB Add STP reinitialization
* 03/11/2015 CRB RETURN EXPR after UNTIL ISASEMI

BEGIN EVAL;

  ENT EVAL;
  EXT TOKENS;
  EXT PROC ISAINT;
  EXT PROC ISAPLU;
  EXT PROC ISAMIN;
  EXT PROC ISAAST;
  EXT PROC ISASLA;
  EXT PROC ISALP;
  EXT PROC ISARP;
  EXT PROC ISASEMI;

  SET PLUS=43;                  * ASCII +
  SET MINUS=45;                 * ASCII -
  SET STAR=42;                  * ASCII *
  SET SLASH=47;                 * ASCII /
  SET LPAREN=40;                * ASCII left parenthesis
  SET RPAREN=41;                * ASCII right parenthesis

  DCL AOP,MOP;                  * add operator, mult operator
  DCL NUMB,TERM=1,EXPR=0;
  DCL PCOUNT;                   * parenthesis level count
  SET STKSIZ=30;                * stack size
  DCL STK(STKSIZ);              * push down stack
  DCL STP=0;                    * stack pointer

* evaluate infix expression starting at IT in TOKENS array
  PROC EVAL(IT);
    PCOUNT=0;
    STP=0;
LABEL LABA;
    AOP=0;
    MOP=0;
    TERM=1;
    EXPR=0;
    IF ISAPLU(IT); THEN AOP=PLUS; IT=IT+4;
      ELSE IF ISAMIN(IT); THEN AOP=MINUS; IT=IT+4;
      ENDIF ENDIF
    IF ISALP(IT); THEN 
      IT=IT+4;
      PCOUNT=PCOUNT+1;
      STK(STP)=AOP; STP=STP+1;
      STK(STP)=MOP; STP=STP+1;
      STK(STP)=EXPR; STP=STP+1;
      STK(STP)=TERM; STP=STP+1;
      GO TO LABA;
      ELSE 
        IF ISAINT(IT); THEN 
          NUMB=TOKENS(IT+1);
          IT=IT+4;
          PCOUNT=PCOUNT+1;
          REPEAT 
            IF MOP EQ STAR; THEN TERM=TERM*NUMB;
              ELSE IF MOP EQ SLASH; THEN TERM=TERM/NUMB;
              ELSE TERM=NUMB;
              ENDIF ENDIF
            MOP=0;
            IF ISAAST(IT); THEN MOP=STAR; IT=IT+4;        
              ELSE IF ISASLA(IT); THEN MOP=SLASH; IT=IT+4;
              ENDIF ENDIF
            IF AOP EQ PLUS; THEN EXPR=EXPR+TERM;
              ELSE IF AOP EQ MINUS; THEN EXPR=EXPR-TERM;
              ELSE EXPR=TERM;
              ENDIF ENDIF
            AOP=0;
            IF ISAPLU(IT); THEN AOP=PLUS; IT=IT+4;
              ELSE IF ISAMIN(IT); THEN AOP=MINUS; IT=IT+4;
              ENDIF ENDIF
            IF ISARP(IT); THEN 
              IT=IT+4;
              PCOUNT=PCOUNT-1;
              NUMB=EXPR;
              STP=STP-1; TERM=STK(STP);
              STP=STP-1; EXPR=STK(STP);
              STP=STP-1; MOP=STK(STP);
              STP=STP-1; AOP=STK(STP);
              ENDIF
            ELSE 
              RETURN EXPR;
            ENDIF
          UNTIL ISASEMI(IT);
        RETURN EXPR;
*        IT=IT+4;
      ENDIF
    RETURN 0;                   * error return, need a flag or summat
  ENDPROC

END
