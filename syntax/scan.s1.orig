* SCAN.S1 -- Frontend scan for Small, CRB, Feb 19, 2014
* 04/06/2014 CRB Rewite for new LEX and TOKENS array
* 06/22/2014 CRB Use BUFF in initsym
* 07/24/2014 CRB Tinkering
* 11/25/2014 CRB Separate out shotoks
* 12/22/2014 CRB Initialize TOKENS to zero inside loop
* 12/31/2014 CRB Handle LKIND=0 at end-of-line
* 01/06/2015 CRB Change TOKNUM to TINDEX, more comments
* 02/02/2015 CRB Change way TOKENS are counted
* 03/09/2015 CRB Add call to evals callback function
* 03/11/2015 CRB Initialize IT=1 before call to EVALS

  BEGIN SCAN;
  ENTRY SCAN;
  ENTRY TOKENS;                   * make TOKENS global for parsing
  ENT SHOTOKS;

  EXT PROC SHOTOKS;               * used only for testing
  EXT PROC READ,WRITE,IFORM;
  EXT PROC LEX;
  EXT PROC EVALS;                 * eval callback function
  EXT BUFF;                       * use BUFF in initsym
  EXT MASKV;
  ENT OUTCH;

  SET MAXTOK=127;                 * maximum number of tokens in a line
  DCL INCH=1,OUTCH=3,STATUS;
  DCL EOF=0;
  DCL LEXEME(4);                  * attributes for a lexical token
  DCL LKIND;                      * lexical KIND code
  DCL ICHAR,MODE;
  DCL STAR=('*');                 * asterisk
  DCL SEMICO=(';');               * semicolon
  DCL FIRSTC;                     * first character of current token
  DCL TOKENS(MAXTOK*4);           * array of tokens in current line
  DCL TINDEX;                     * current token index
  DCL ANSWER,IT;                  * eval answer, index into TOKENS array

PROC SCAN;                        * frontend scanner for Small
  DO WHILE 1;
    TOKENS=0;                     * reinitialize to zero for each loop
    MODE=1;                       * MODE 1 allows comments
    STATUS=READ(INCH,BUFF);
    IF STATUS EQ EOF; 
      THEN RETURN;
      ENDIF
    CALL WRITE(OUTCH,BUFF);
    ICHAR=1;
    TINDEX=1;
    DO WHILE ICHAR LE BUFF;       * until end of line
      LKIND=LEX(ICHAR,LEXEME);    * call LEX, get LKIND and LEXEME
LABEL LEX1;                       * debugging hack
      IF LKIND EQ 0;
        THEN GO TO CONTIN; ENDIF 
      FIRSTC=BUFF(LEXEME AND 255); * extract anchor for 1st char of token
      IF MODE; THEN 
        IF FIRSTC EQ STAR;        * if MODE 1 and * skip to next
          THEN GO TO CONTIN;      * input line to ignore comment
          ELSE MODE=0;            * comments not allowed in MODE 0
        ENDIF ENDIF
      IF MODE EQ 0; THEN 
        IF FIRSTC EQ SEMICO;      * revert to mode 1 on semicolon
           THEN MODE=1;
        ENDIF ENDIF

      TOKENS(TINDEX)=LEXEME;      * save current token
      CASE LKIND-1; OF LK1,LK2,LK3,LK4;
LABEL LK1; GO TO LK4;             * symbol in TABLE
LABEL LK2; TOKENS(TINDEX+1)=LEXEME(1); * integer value
LABEL LK3;                        * quote string
LABEL LK4;                        * single character token
        TOKENS(TINDEX+1)=LEXEME(1);
        TOKENS(TINDEX+2)=LEXEME(2);
        TOKENS(TINDEX+3)=LEXEME(3);
      ENDCASE 

      TINDEX=TINDEX+4;            * bump token index
      TOKENS=TOKENS+1;            * count number of tokens
      ENDDO

LABEL CONTIN;
*    CALL SHOTOKS;                 * used only for testing
    IT=1;
    ANSWER=EVALS(IT);             * call eval shell
    ENDDO
  RETURN
ENDPROC

END
