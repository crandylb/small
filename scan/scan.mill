** SCAN.S1 -- Frontend scan for Small, CRB, Feb 19, 2014
** 04/06/2014 CRB Rewite for new LEX and TOKENS array
** 06/22/2014 CRB Use BUFF in initsym
** 07/24/2014 CRB Tinkering
** 11/25/2014 CRB Separate out shotoks
** 12/22/2014 CRB Initialize TOKENS to zero inside loop
** 12/31/2014 CRB Handle LKIND=0 at end-of-line
** 01/06/2015 CRB Change TOKNUM to TINDEX, more comments
** 02/02/2015 CRB Change way TOKENS are counted
** 08/04/2015 CRB Add LISTNG for source listing output
** 09/04/2015 CRB Cleanup for listing output
** 09/11/2015 CRB Adding TSTFLG to control SHOTOKS
*
*  BEGIN SCAN;
 BEGIN
*  ENTRY SCAN;
 ENT  SCAN
*  ENTRY TOKENS;                   * make TOKENS global for parsing
 ENT  TOKENS
*
*  EXT PROC SHOTOKS;               * used only for testing
 EXT P SHOTOKS
*  EXT PROC READ,WRITE,IFORM;
 EXT P READ
 EXT  WRITE
 EXT  IFORM
*  EXT PROC LEX;
 EXT P LEX
*  EXT PROC CAT2,CAT3;
 EXT P CAT2
 EXT  CAT3
*  EXT BUFF;                       * use BUFF in initsym
 EXT  BUFF
*  EXT MASKV;
 EXT  MASKV
*  EXT TSTFLG;
 EXT  TSTFLG
*  ENT OUTCH;
 ENT  OUTCH
*
*  SET MAXTOK=127;                 * maximum number of tokens in a line
*  DCL INCH=1,OUTCH=3,STATUS;
 SECT DATA
 LABEL INCH
 CONST  1
 LABEL OUTCH
 CONST  3
 LABEL STATUS
 SPACE  1
*  DCL EOF=0;
 SECT DATA
 LABEL EOF
 CONST  0
*  DCL LEXEME(4);                  * attributes for a lexical token
 SECT DATA
 LABEL LEXEME
 SPACE  5
*  DCL LKIND;                      * lexical KIND code
 SECT DATA
 LABEL LKIND
 SPACE  1
*  DCL ICHAR,MODE;
 SECT DATA
 LABEL ICHAR
 SPACE  1
 LABEL MODE
 SPACE  1
*  DCL STAR=('*');                 * asterisk
 SECT DATA
 LABEL STAR
 CONST  42
*  DCL SEMICO=(';');               * semicolon
 SECT DATA
 LABEL SEMICO
 CONST  59
*  DCL FIRSTC;                     * first character of current token
 SECT DATA
 LABEL FIRSTC
 SPACE  1
*  DCL TOKENS(MAXTOK*4);           * array of tokens in current line
 SECT DATA
 LABEL TOKENS
 SPACE  509
*  DCL TINDEX;                     * current token index
 SECT DATA
 LABEL TINDEX
 SPACE  1
*  MSG COMMNT='* ';                * prefix for comment in mill output
 SECT DATA
 LABEL COMMNT
 CONST  2
 CONST  42
 CONST  32
*
*PROC SCAN;                        * frontend scanner for Small
 SECT CODE
 SUBR P SCAN
 NPARS  0
 PEND
*  DO WHILE 1;
 LABEL LJ1
*.GEN =1,=0,.BN-,
 L  =1
 -  =0
 JEQ  LJ2
*    TOKENS=0;                     * reinitialize to zero for each loop
*.GEN =TOKENS,=0,.BNST,
 L  =0
 ST  TOKENS
*    MODE=1;                       * MODE 1 allows comments
*.GEN =MODE,=1,.BNST,
 L  =1
 ST  MODE
*    STATUS=READ(INCH,BUFF);
*.GEN =STATUS,(INCH,BUFF),.UFREAD,.BNST,
 SCALL P READ
 NARGS  2
 ARG  INCH
 ARG  BUFF
 CEND
 ST  STATUS
*    IF STATUS EQ EOF;             * end of source input file
*.GEN STATUS,EOF,.BN-,
 L  STATUS
 -  EOF
*      THEN RETURN;
 JNE  LJ4
 RETN  SCAN,0
*      ENDIF 
 LABEL LJ4
*    LINCNT=LINCNT+1;              * bump line count
*.GEN =LINCNT,LINCNT,=1,.BC+,.BNST,
 L  LINCNT
 +  =1
 ST  LINCNT
*    LISTLN=0;                     * initialize listing line buffer
*.GEN =LISTLN,=0,.BNST,
 L  =0
 ST  LISTLN
*    CALL CAT2(LISTLN,COMMNT);     * insert coment prefix
 SCALL P CAT2
 NARGS  2
 ARG  LISTLN
 ARG  COMMNT
 CEND
*    CALL CAT2(LISTLN,BUFF);       * append source line
 SCALL P CAT2
 NARGS  2
 ARG  LISTLN
 ARG  BUFF
 CEND
*    CALL WRITE(OUTCH,LISTLN);     * output to mill as comment
 SCALL  WRITE
 NARGS  2
 ARG  OUTCH
 ARG  LISTLN
 CEND
**    LEVEL=1;                      * test level
*    CALL LISTNG;                  * source listing output
 SCALL  LISTNG
 NARGS  0
 CEND
*    ICHAR=1;
*.GEN =ICHAR,=1,.BNST,
 L  =1
 ST  ICHAR
*    TINDEX=1;
*.GEN =TINDEX,=1,.BNST,
 L  =1
 ST  TINDEX
*    DO WHILE ICHAR LE BUFF;       * until end of line
 LABEL LJ8
*.GEN ICHAR,BUFF,.BN-,
 L  ICHAR
 -  BUFF
 JGT  LJ9
*      LKIND=LEX(ICHAR,LEXEME);    * call LEX, get LKIND and LEXEME
*.GEN =LKIND,(ICHAR,LEXEME),.UFLEX,.BNST,
 SCALL P LEX
 NARGS  2
 ARG  ICHAR
 ARG  LEXEME
 CEND
 ST  LKIND
*LABEL LEX1;                       * debugging hack
 SECT CODE
 LABEL LEX1
*      IF LKIND EQ 0;              * end of line if null token
*.GEN LKIND,=0,.BN-,
 L  LKIND
 -  =0
*        THEN GO TO CONTIN; ENDIF 
 JNE  LJ11
 J  CONTIN
 LABEL LJ11
*      FIRSTC=BUFF(LEXEME AND 255); * extract anchor for 1st char of token
*.GEN =FIRSTC,=BUFF,LEXEME,=255,.BCAND,=2,.BNSHL,.BC+,.UA,.BNST,
 L  LEXEME
 AND  =255
 SHL  =2
 +  =BUFF
 L  *.AC
 ST  FIRSTC
*      IF MODE; THEN 
*.GEN MODE,=0,.BN-,
 L  MODE
 -  =0
 JEQ  LJ12
*        IF FIRSTC EQ STAR;        * if MODE 1 and * skip to next
*.GEN FIRSTC,STAR,.BN-,
 L  FIRSTC
 -  STAR
*          THEN GO TO CONTIN;      * if comment ignore rest of line
 JNE  LJ13
 J  CONTIN
*          ELSE MODE=0;            * comments not allowed in MODE 0
 J  LJ14
 LABEL LJ13
*.GEN =MODE,=0,.BNST,
 L  =0
 ST  MODE
*        ENDIF ENDIF
 LABEL LJ14
 LABEL LJ12
*      IF MODE EQ 0; THEN 
*.GEN MODE,=0,.BN-,
 L  MODE
 -  =0
 JNE  LJ15
*        IF FIRSTC EQ SEMICO;      * revert to mode 1 on semicolon
*.GEN FIRSTC,SEMICO,.BN-,
 L  FIRSTC
 -  SEMICO
*           THEN MODE=1;
 JNE  LJ16
*.GEN =MODE,=1,.BNST,
 L  =1
 ST  MODE
*        ENDIF ENDIF
 LABEL LJ16
 LABEL LJ15
*
*      TOKENS(TINDEX)=LEXEME;      * save current token
*.GEN =TOKENS,TINDEX,=2,.BNSHL,.BC+,LEXEME,.BNST,
 L  TINDEX
 SHL  =2
 +  =TOKENS
 ST  T1Z
 L  LEXEME
 ST  *T1Z
*      CASE LKIND-1; OF LK1,LK2,LK3,LK4;
*.GEN LKIND,=1,.BN-,=0,.BN-,
 L  LKIND
 -  =1
 -  =0
 JX  17
 JC  LK1
 JC  LK2
 JC  LK3
 JC  LK4
*LABEL LK1; GO TO LK4;             * symbol in TABLE
 SECT CODE
 J  LJ17
 LABEL LK1
 J  LK4
*LABEL LK2; TOKENS(TINDEX+1)=LEXEME(1); * integer value
 SECT CODE
 J  LJ17
 LABEL LK2
*.GEN =TOKENS,TINDEX,=1,.BC+,=2,.BNSHL,.BC+,=LEXEME,=1,=2,.BNSHL,.BC+,.UA,.BNST,
 L  TINDEX
 +  =1
 SHL  =2
 +  =TOKENS
 ST  T1Z1
 L  =1
 SHL  =2
 +  =LEXEME
 L  *.AC
 ST  *T1Z1
*LABEL LK3;                        * quote string
 SECT CODE
 J  LJ17
 LABEL LK3
*LABEL LK4;                        * single character token
 SECT CODE
 J  LJ17
 LABEL LK4
*        TOKENS(TINDEX+1)=LEXEME(1);
*.GEN =TOKENS,TINDEX,=1,.BC+,=2,.BNSHL,.BC+,=LEXEME,=1,=2,.BNSHL,.BC+,.UA,.BNST,
 L  TINDEX
 +  =1
 SHL  =2
 +  =TOKENS
 ST  T1Z1
 L  =1
 SHL  =2
 +  =LEXEME
 L  *.AC
 ST  *T1Z1
*        TOKENS(TINDEX+2)=LEXEME(2);
*.GEN =TOKENS,TINDEX,=2,.BC+,=2,.BNSHL,.BC+,=LEXEME,=2,=2,.BNSHL,.BC+,.UA,.BNST,
 L  TINDEX
 +  =2
 SHL  =2
 +  =TOKENS
 ST  T1Z1
 L  =2
 SHL  =2
 +  =LEXEME
 L  *.AC
 ST  *T1Z1
*        TOKENS(TINDEX+3)=LEXEME(3);
*.GEN =TOKENS,TINDEX,=3,.BC+,=2,.BNSHL,.BC+,=LEXEME,=3,=2,.BNSHL,.BC+,.UA,.BNST,
 L  TINDEX
 +  =3
 SHL  =2
 +  =TOKENS
 ST  T1Z1
 L  =3
 SHL  =2
 +  =LEXEME
 L  *.AC
 ST  *T1Z1
*      ENDCASE 
 LABEL LJ17
*
*      TINDEX=TINDEX+4;            * bump token index
*.GEN =TINDEX,TINDEX,=4,.BC+,.BNST,
 L  TINDEX
 +  =4
 ST  TINDEX
*      TOKENS=TOKENS+1;            * count number of tokens
*.GEN =TOKENS,TOKENS,=1,.BC+,.BNST,
 L  TOKENS
 +  =1
 ST  TOKENS
*      ENDDO
 J  LJ8
 LABEL LJ9
*
*LABEL CONTIN;
 SECT CODE
 LABEL CONTIN
*    IF TSTFLG; THEN               * use flag to control output
*.GEN TSTFLG,=0,.BN-,
 L  TSTFLG
 -  =0
 JEQ  LJ18
*      CALL SHOTOKS;               * used only for testing
 SCALL P SHOTOKS
 NARGS  0
 CEND
*      ENDIF
 LABEL LJ18
*    ENDDO
 J  LJ1
 LABEL LJ2
*  RETURN
 RETN  SCAN,0
*ENDPROC
 SECT DATA
 LABEL T1Z
 SPACE  2
 SECT CODE
 SECT DATA
 LABEL T1Z1
 SPACE  1
 SECT CODE
*
** Format print line for source listing output
*  DCL LISTCH=4;                   * listing channel
 SECT DATA
 LABEL LISTCH
 CONST  4
*  DCL LINCNT=0;                   * source line count
 SECT DATA
 LABEL LINCNT
 CONST  0
*  DCL LEVEL=0;                    * structure level number
 SECT DATA
 LABEL LEVEL
 CONST  0
*  DCL LINSUB=3*256+8;             * substring for line number
 SECT DATA
 LABEL LINSUB
 CONST  776
*  DCL LEVSUB=3*256+8;             * substring for level number
 SECT DATA
 LABEL LEVSUB
 CONST  776
*  DCL TMP(12);                    * temp buffer for number conversion
 SECT DATA
 LABEL TMP
 SPACE  13
*  DCL LISTLN(127);                * buffer for source listing line
 SECT DATA
 LABEL LISTLN
 SPACE  128
*  MSG SPACES='  ';                * two spaces
 SECT DATA
 LABEL SPACES
 CONST  2
 CONST  32
 CONST  32
*
*PROC LISTNG;
 SECT CODE
 SUBR P LISTNG
 NPARS  0
 PEND
*  LISTLN=0;                       * initialize listing buffer
*.GEN =LISTLN,=0,.BNST,
 L  =0
 ST  LISTLN
*  TMP=10;                         * initialize temp conversion buffer
*.GEN =TMP,=10,.BNST,
 L  =10
 ST  TMP
*  CALL IFORM(LINCNT,TMP);         * convert line number to string
 SCALL  IFORM
 NARGS  2
 ARG  LINCNT
 ARG  TMP
 CEND
*  CALL CAT3(LISTLN,LINSUB,TMP);   * copy line number to listing line
 SCALL  CAT3
 NARGS  3
 ARG  LISTLN
 ARG  LINSUB
 ARG  TMP
 CEND
*  IF LEVEL; THEN 
*.GEN LEVEL,=0,.BN-,
 L  LEVEL
 -  =0
 JEQ  LJ21
*    CALL IFORM(LEVEL,TMP);        * convert level number to string
 SCALL  IFORM
 NARGS  2
 ARG  LEVEL
 ARG  TMP
 CEND
*    CALL CAT3(LISTLN,LEVSUB,TMP); * copy level number to output
 SCALL  CAT3
 NARGS  3
 ARG  LISTLN
 ARG  LEVSUB
 ARG  TMP
 CEND
*    ELSE CALL CAT2(LISTLN,SPACES);
 J  LJ24
 LABEL LJ21
 SCALL P CAT2
 NARGS  2
 ARG  LISTLN
 ARG  SPACES
 CEND
*    ENDIF
 LABEL LJ24
*  CALL CAT2(LISTLN,SPACES);       * copy spaces to output
 SCALL P CAT2
 NARGS  2
 ARG  LISTLN
 ARG  SPACES
 CEND
*  CALL CAT2(LISTLN,BUFF);         * copy input line to output
 SCALL P CAT2
 NARGS  2
 ARG  LISTLN
 ARG  BUFF
 CEND
*  CALL WRITE(LISTCH,LISTLN);      * print the listing line
 SCALL  WRITE
 NARGS  2
 ARG  LISTCH
 ARG  LISTLN
 CEND
*  RETURN
 RETN  LISTNG,0
*ENDPROC
*
*END
 END
